/*
 * R2Symbol.java Version-1.4, 2002/11/22 09:26:10 -0800 (Fri)
 * ECTF S.410-R2 Source code distribution.
 *
 * Copyright (c) 2002, Enterprise Computer Telephony Forum (ECTF),
 * All Rights Reserved.
 *
 * Use and redistribution of this file is subject to a License.
 * For terms and conditions see: javax/telephony/media/LICENSE.HTML
 * 
 * In short, you can use this source code if you keep and display
 * the ECTF Copyright and the License conditions. The code is supplied
 * "AS IS" and ECTF disclaims all warranties and liability.
 */

package javax.telephony.media.symbols;
import javax.telephony.media.*;
import java.util.Hashtable;

/**
 * Defines the standard ECTF Symbols.
 * These Symbol use (Format == 0)
 * in accordance with the S.100-R2 specification, and as revised
 * by the ECTF Symbol Working Group.
 * <p>
 * The original list of Symbols and their names was machine generated
 * from the ECTF S.100 R2 header file listing.  
 * Some edits have been made to fix errors and omissions in S.100 R2.
 * <p>
 * This interface is public, because:
 * <ol>
 * <li> the spec does not include the JavaDoc from this (symbols) package,</li>
 * <li> being public, these symbols can be accessed by other packages.
 * <br> in particular they are inherited through ESymbol. </li>
 * </ol>
 * The preferred method for applications to access these symbols
 * is via the ESymbol interface. as this filename is subject to change.
 * <p>
 * This file contains the actual value assignments for the Symbols
 * and is primarily relevant to S410 Peer/Provider implementors.
 *
 * @author  Jeff Peck
 * @since   JTAPI-1.3
 */
public
interface R2Symbol { 
    // Editors note: 
    // when translating the S.100-R2 header file defined names,
    // change c/KVSet/KVS/ c/FaxService/Fax/
    // c/Srv/Service/
    /* *************************************************************
     * ECTF defined symbol object values.  
     * *************************************************************
     */
    int Any_	   	= 0x0000; // Any object
    int ASR_	   	= 0x0001; // ASR Resource
    int CCR_	   	= 0x0002; // Call Channel Resource
    int CPR_	   	= 0x0003; // Conference Port Resource
    int Container_    	= 0x0004; // Container
    int Error_	   	= 0x0005; // Error
    int FaxReceiver_  	= 0x0006; // Fax Receiver Resource
    int FaxSender_    	= 0x0007; // Fax Sender Resource
    int Faxll_	   	= 0x0008; // Fax Low Level
    int Fax_	   	= 0x0009; // Fax Service
    int Group_	   	= 0x000A; // Group
    int KVS_	   	= 0x000B; // KVSet
    int Language_     	= 0x000C; // Language
    int Macro_	   	= 0x000D; // Macro
    int Message_	= 0x000E; // Message
    int Player_	   	= 0x000F; // Player Resource
    int Recorder_     	= 0x0010; // Recorder Resource
    int SCR_	   	= 0x0011; // SCR
    int Session_	= 0x0012; // Session
    int SD_	   	= 0x0013; // Signal Detector Resource
    int SG_	   	= 0x0014; // Signal Generator Resource
    int Admin_	   	= 0x0015; // Administration
    int SessionManager_	= 0x0016; // Session Manager
    int Symbol_	   	= 0x0017; // Symbol Table
    int Application_ 	= 0x0018; // Local Application
    int Service_ 	= 0x0019; // Application service
    // missing from S.100-R2:
    int SPR_		= 0x00C0; // Switch Port Resource (not in sequence)


    /* **************************************************************
     * Definitions of standard error codes.
     * <p>
     * Errors, while not strictly speaking an object or service type, 
     * must have a common name space, 
     * and so have their own Object Name/Value defined.
     * <p>
     * Note that all errors within each vendor's number space
     * share that number space - i.e. there is no further
     * error partitioning by resource type.  This is consistent
     * with the reality that there is a great deal of overlap
     * in the errors generated by different resource requests.
     **************************************************************/
    /** @deprecated use Error_Class */
    Symbol Error_ResourceClass		= Format0.f0symbol(Error_     , 0x000);
    Symbol Error_Class			= Format0.f0symbol(Error_     , 0x000);
    Symbol Error_OK			= Format0.f0symbol(Error_     , 0x001);
    Symbol Error_BadArg			= Format0.f0symbol(Error_     , 0x002);
    Symbol Error_BadASI			= Format0.f0symbol(Error_     , 0x003);
    Symbol Error_BadContainer		= Format0.f0symbol(Error_     , 0x004);
    Symbol Error_BadContainerName	= Format0.f0symbol(Error_     , 0x005);
    Symbol Error_BadContext		= Format0.f0symbol(Error_     , 0x006);
    Symbol Error_BadDataFlow		= Format0.f0symbol(Error_     , 0x007);
    Symbol Error_BadDataID		= Format0.f0symbol(Error_     , 0x008);
    Symbol Error_BadDestAddress		= Format0.f0symbol(Error_     , 0x009);
    Symbol Error_BadEvent		= Format0.f0symbol(Error_     , 0x00A);
    /** bad Fax Service */
    Symbol Error_BadFaxSVC		= Format0.f0symbol(Error_     , 0x00B);
    Symbol Error_BadFileFormat		= Format0.f0symbol(Error_     , 0x00C);
    Symbol Error_BadFunction		= Format0.f0symbol(Error_     , 0x00D);
    Symbol Error_BadGrammarContext	= Format0.f0symbol(Error_     , 0x00E);
    Symbol Error_BadGroup		= Format0.f0symbol(Error_     , 0x00F);
    Symbol Error_BadGroupConfig		= Format0.f0symbol(Error_     , 0x010);
    Symbol Error_BadKey			= Format0.f0symbol(Error_     , 0x011);
    Symbol Error_BadKVSet		= Format0.f0symbol(Error_     , 0x012);
    Symbol Error_BadList		= Format0.f0symbol(Error_     , 0x013);
    Symbol Error_BadMode		= Format0.f0symbol(Error_     , 0x014);
    Symbol Error_BadObject		= Format0.f0symbol(Error_     , 0x015);
    Symbol Error_BadObjectName		= Format0.f0symbol(Error_     , 0x016);
    Symbol Error_BadParm		= Format0.f0symbol(Error_     , 0x017);
    Symbol Error_BadParmName		= Format0.f0symbol(Error_     , 0x018);
    Symbol Error_BadParmType		= Format0.f0symbol(Error_     , 0x019);
    Symbol Error_BadParmValue		= Format0.f0symbol(Error_     , 0x01A);
    Symbol Error_BadPattern		= Format0.f0symbol(Error_     , 0x01B);
    Symbol Error_BadPrimaryResourceType	= Format0.f0symbol(Error_     , 0x01C);
    Symbol Error_BadResource		= Format0.f0symbol(Error_     , 0x01D);
    Symbol Error_BadRTC			= Format0.f0symbol(Error_     , 0x01E);
    Symbol Error_BadRTCAction		= Format0.f0symbol(Error_     , 0x01F);
    Symbol Error_BadRTCCondition	= Format0.f0symbol(Error_     , 0x020);
    Symbol Error_BadRule		= Format0.f0symbol(Error_     , 0x021);
    Symbol Error_BadRuleExpansion	= Format0.f0symbol(Error_     , 0x022);
    Symbol Error_BadServer		= Format0.f0symbol(Error_     , 0x023);
    Symbol Error_BadService		= Format0.f0symbol(Error_     , 0x024);
    Symbol Error_BadSession		= Format0.f0symbol(Error_     , 0x025);
    Symbol Error_BadSignalID		= Format0.f0symbol(Error_     , 0x026);
    /** Bad "Spatial Media" MDO name from Fax resource */
    Symbol Error_BadSM			= Format0.f0symbol(Error_     , 0x027);
    Symbol Error_BadTargetSession	= Format0.f0symbol(Error_     , 0x028);
    Symbol Error_BadTDD			= Format0.f0symbol(Error_     , 0x029);
    Symbol Error_BadTVM			= Format0.f0symbol(Error_     , 0x02A);
    Symbol Error_BadValueType		= Format0.f0symbol(Error_     , 0x02B);
    Symbol Error_BadWord		= Format0.f0symbol(Error_     , 0x02C);
    Symbol Error_BandwidthMismatch	= Format0.f0symbol(Error_     , 0x02D);
    Symbol Error_Busy			= Format0.f0symbol(Error_     , 0x02E);
    Symbol Error_CallDropped		= Format0.f0symbol(Error_     , 0x02F);
    Symbol Error_Coder			= Format0.f0symbol(Error_     , 0x030);
    Symbol Error_Comms			= Format0.f0symbol(Error_     , 0x031);
    Symbol Error_ConnExists		= Format0.f0symbol(Error_     , 0x032);
    Symbol Error_ContainerExists	= Format0.f0symbol(Error_     , 0x033);
    Symbol Error_ContainerFull		= Format0.f0symbol(Error_     , 0x034);
    Symbol Error_ContainerNotExist	= Format0.f0symbol(Error_     , 0x035);
    Symbol Error_CouldNotDrop		= Format0.f0symbol(Error_     , 0x036);
    Symbol Error_Destroyed		= Format0.f0symbol(Error_     , 0x037);
    Symbol Error_Directionality		= Format0.f0symbol(Error_     , 0x038);
    /** error value when primary (CCR) is IDLE or otherwise not connected */
    Symbol Error_Disconnected		= Format0.f0symbol(Error_     , 0x039);
    Symbol Error_DupHandler		= Format0.f0symbol(Error_     , 0x03A);
    Symbol Error_EndOfKeys		= Format0.f0symbol(Error_     , 0x03B);
    Symbol Error_Exists			= Format0.f0symbol(Error_     , 0x03C);
    Symbol Error_HandlerNotFound	= Format0.f0symbol(Error_     , 0x03D);
    Symbol Error_IncorrectContext	= Format0.f0symbol(Error_     , 0x03E);
    Symbol Error_InfiniteLoop		= Format0.f0symbol(Error_     , 0x03F);
    Symbol Error_InUse			= Format0.f0symbol(Error_     , 0x040);
    Symbol Error_InvalidAccessMode	= Format0.f0symbol(Error_     , 0x041);
    Symbol Error_InvalidCCMessage	= Format0.f0symbol(Error_     , 0x042);
    Symbol Error_InvalidFile		= Format0.f0symbol(Error_     , 0x043);
    Symbol Error_InvalidHandle		= Format0.f0symbol(Error_     , 0x044);
    Symbol Error_InvalidParameter	= Format0.f0symbol(Error_     , 0x045);
    /** @deprecate spell out Error_InvalidPosition */
    Symbol Error_InvPosition		= Format0.f0symbol(Error_     , 0x046);
    Symbol Error_InvalidPosition	= Format0.f0symbol(Error_     , 0x046);
    /** @deprecate spell out Error_InvalidTDD */
    Symbol Error_INVTDD			= Format0.f0symbol(Error_     , 0x047);
    Symbol Error_InvalidTDD		= Format0.f0symbol(Error_     , 0x047);
    Symbol Error_KeyNotFound		= Format0.f0symbol(Error_     , 0x048);
    Symbol Error_Locked			= Format0.f0symbol(Error_     , 0x049);
    Symbol Error_NoBandwidth		= Format0.f0symbol(Error_     , 0x04A);
    Symbol Error_NoBuffering		= Format0.f0symbol(Error_     , 0x04B);
    Symbol Error_NoConnection		= Format0.f0symbol(Error_     , 0x04C);
    Symbol Error_NoConnections		= Format0.f0symbol(Error_     , 0x04D);
    Symbol Error_NoConsultationCall	= Format0.f0symbol(Error_     , 0x04E);
    Symbol Error_NoContainer		= Format0.f0symbol(Error_     , 0x04F);
    Symbol Error_NoDeviceAvailable	= Format0.f0symbol(Error_     , 0x050);
    Symbol Error_NoDonor		= Format0.f0symbol(Error_     , 0x051);
    Symbol Error_NoExists		= Format0.f0symbol(Error_     , 0x052);
    Symbol Error_NoProfile		= Format0.f0symbol(Error_     , 0x053);
    Symbol Error_NotAnswered		= Format0.f0symbol(Error_     , 0x054);
    Symbol Error_NotConfigured		= Format0.f0symbol(Error_     , 0x055);
    Symbol Error_NoTDDs			= Format0.f0symbol(Error_     , 0x056);
    Symbol Error_NoTermination		= Format0.f0symbol(Error_     , 0x057);
    Symbol Error_NotFound		= Format0.f0symbol(Error_     , 0x058);
    Symbol Error_NotOnStack		= Format0.f0symbol(Error_     , 0x059);
    Symbol Error_NotPaused		= Format0.f0symbol(Error_     , 0x05A);
    Symbol Error_NoTranStopped		= Format0.f0symbol(Error_     , 0x05B);
    Symbol Error_NotSupported		= Format0.f0symbol(Error_     , 0x05C);
    Symbol Error_NullArray		= Format0.f0symbol(Error_     , 0x05D);
    Symbol Error_ObjectExists		= Format0.f0symbol(Error_     , 0x05E);
    Symbol Error_ObjectFull		= Format0.f0symbol(Error_     , 0x05F);
    Symbol Error_ObjectNotExist		= Format0.f0symbol(Error_     , 0x060);
    Symbol Error_OutOfData		= Format0.f0symbol(Error_     , 0x061);
    Symbol Error_OutOfService		= Format0.f0symbol(Error_     , 0x062);
    Symbol Error_Paused			= Format0.f0symbol(Error_     , 0x063);
    Symbol Error_Permission		= Format0.f0symbol(Error_     , 0x064);
    Symbol Error_PrimaryReconfig	= Format0.f0symbol(Error_     , 0x065);
    Symbol Error_Quota			= Format0.f0symbol(Error_     , 0x066);
    Symbol Error_Refused		= Format0.f0symbol(Error_     , 0x067);
    Symbol Error_ResourceUnavailable	= Format0.f0symbol(Error_     , 0x068);
    Symbol Error_ServiceDefined		= Format0.f0symbol(Error_     , 0x069);
    Symbol Error_ServiceNotDefined	= Format0.f0symbol(Error_     , 0x06A);
    Symbol Error_ServiceNotRegistered	= Format0.f0symbol(Error_     , 0x06B);
    Symbol Error_ShuttingDown		= Format0.f0symbol(Error_     , 0x06C);
    Symbol Error_Stopped		= Format0.f0symbol(Error_     , 0x06D);
    Symbol Error_System			= Format0.f0symbol(Error_     , 0x06E);
    Symbol Error_Timeout		= Format0.f0symbol(Error_     , 0x06F);
    Symbol Error_TVMFail		= Format0.f0symbol(Error_     , 0x070);
    Symbol Error_Unconnectable		= Format0.f0symbol(Error_     , 0x071);
    Symbol Error_UnstoppableTran	= Format0.f0symbol(Error_     , 0x072);
    Symbol Error_ValueIsArray		= Format0.f0symbol(Error_     , 0x073);
    Symbol Error_ValueNotArray		= Format0.f0symbol(Error_     , 0x074);
    
    // missing from S.100
    Symbol Error_TooManyProfs		= Format0.f0symbol(Error_     , 0x075);
    Symbol Error_ExportError		= Format0.f0symbol(Error_     , 0x076);
    Symbol Error_CantOpenFile		= Format0.f0symbol(Error_     , 0x077);
    Symbol Error_NoMem			= Format0.f0symbol(Error_     , 0x078);
    Symbol Error_TranStopped		= Format0.f0symbol(Error_     , 0x079);
    Symbol Error_BadSymbol		= Format0.f0symbol(Error_     , 0x07A);
    Symbol Error_FileNotFound		= Format0.f0symbol(Error_     , 0x07B);


    /***************************************************************
     * Any: Definitions of well known keys. 
     **************************************************************/
    Symbol Any_Null			= Format0.f0symbol(Any_	      , 0x000);
    Symbol Any_Standard			= Format0.f0symbol(Any_	      , 0x001);
    Symbol Any_Stop			= Format0.f0symbol(Any_	      , 0x007);
    Symbol Any_Attributes		= Format0.f0symbol(Any_	      , 0x010);
    Symbol Any_AttributeValues		= Format0.f0symbol(Any_	      , 0x011);
    Symbol Any_Duration			= Format0.f0symbol(Any_	      , 0x012);
    Symbol Any_NotSupported		= Format0.f0symbol(Any_	      , 0x013);
    Symbol Any_OptionalArgs		= Format0.f0symbol(Any_	      , 0x014);
    Symbol Any_Parameters		= Format0.f0symbol(Any_	      , 0x015);
    Symbol Any_ParmList			= Format0.f0symbol(Any_	      , 0x016);
    Symbol Any_ParmValues		= Format0.f0symbol(Any_	      , 0x017);
    Symbol Any_Results			= Format0.f0symbol(Any_	      , 0x018);
    Symbol Any_Timeout			= Format0.f0symbol(Any_	      , 0x019);
    Symbol Any_Undetermined		= Format0.f0symbol(Any_	      , 0x01A);
    
    /***************************************************************
     * KVS: KVSet Reserved Keys                                               
     **************************************************************/
    Symbol KVS_Class			= Format0.f0symbol(KVS_	      , 0x000);
    Symbol KVS_Empty			= Format0.f0symbol(KVS_	      , 0x001);
    Symbol KVS_FirstKey			= Format0.f0symbol(KVS_	      , 0x002);

    // added for S410 ConfigSpec-ResourceSpec marshalling:
    /** value is an Array of operand objects. */
    Symbol KVS_Operand			= Format0.f0symbol(KVS_	      , 0x010);
    /** Key for the operator type. 
     * Value is one of the OperatorXxx Symbols below.
     */
    Symbol KVS_Operator			= Format0.f0symbol(KVS_	      , 0x011);
    /** Add the operand Resource to current configuration. */
    Symbol KVS_OperatorAdd		= Format0.f0symbol(KVS_	      , 0x012);
    /** Require one of the alternative operands. */
    Symbol KVS_OperatorAlt		= Format0.f0symbol(KVS_	      , 0x013);
    /** Require all of the operands. */
    Symbol KVS_OperatorAnd		= Format0.f0symbol(KVS_	      , 0x014);
    /** Require the ability to Add the operands in the future. */
    Symbol KVS_OperatorFuture		= Format0.f0symbol(KVS_	      , 0x015);
    /** For boolean completness, no current use. */
    Symbol KVS_OperatorNot		= Format0.f0symbol(KVS_	      , 0x016);
    /** Require one of the operands, use first one that satisfies. */
    Symbol KVS_OperatorOr		= Format0.f0symbol(KVS_	      , 0x017);

    /***************************************************************
     * ASR: Automatic Speech Recognition symbols.                        
     **************************************************************/
    Symbol ASR_ResourceClass		= Format0.f0symbol(ASR_	      , 0x000);
    Symbol ASR_ResourceID		= Format0.f0symbol(ASR_	      , 0x001);
    Symbol ASR_ResourceName		= Format0.f0symbol(ASR_	      , 0x002);
    Symbol ASR_ResourceVendor		= Format0.f0symbol(ASR_	      , 0x003);
    Symbol ASR_ResourceVersion		= Format0.f0symbol(ASR_	      , 0x004);
    Symbol ASR_DynamicallyAllocated	= Format0.f0symbol(ASR_	      , 0x005);
    Symbol ASR_NetworkID		= Format0.f0symbol(ASR_	      , 0x006);
    Symbol ASR_Stop			= Format0.f0symbol(ASR_	      , 0x007);
    
    Symbol ASR_ActiveContexts		= Format0.f0symbol(ASR_	      , 0x010);
    Symbol ASR_ActiveRules		= Format0.f0symbol(ASR_	      , 0x011);
    Symbol ASR_ActiveWords		= Format0.f0symbol(ASR_	      , 0x012);
    Symbol ASR_AddTraining		= Format0.f0symbol(ASR_	      , 0x013);
    Symbol ASR_AutomaticTraining	= Format0.f0symbol(ASR_	      , 0x014);
    Symbol ASR_BargeInHere		= Format0.f0symbol(ASR_	      , 0x015);
    Symbol ASR_Collision		= Format0.f0symbol(ASR_	      , 0x016);
    Symbol ASR_Complete			= Format0.f0symbol(ASR_	      , 0x017);
    Symbol ASR_ConContext		= Format0.f0symbol(ASR_	      , 0x018);
    Symbol ASR_Context			= Format0.f0symbol(ASR_	      , 0x019);
    Symbol ASR_ContextCopy		= Format0.f0symbol(ASR_	      , 0x01A);
    Symbol ASR_ContextCreate		= Format0.f0symbol(ASR_	      , 0x01B);
    Symbol ASR_ContextGetParameters	= Format0.f0symbol(ASR_	      , 0x01C);
    Symbol ASR_ContextName		= Format0.f0symbol(ASR_	      , 0x01D);
    Symbol ASR_ContextParms		= Format0.f0symbol(ASR_	      , 0x01E);
    Symbol ASR_ContextRemove		= Format0.f0symbol(ASR_	      , 0x01F);
    Symbol ASR_ContextSetParameters	= Format0.f0symbol(ASR_	      , 0x020);
    Symbol ASR_ContextType		= Format0.f0symbol(ASR_	      , 0x021);
    Symbol ASR_Continuous		= Format0.f0symbol(ASR_	      , 0x022);
    /** ResourceVersion date */
    Symbol ASR_Date			= Format0.f0symbol(ASR_	      , 0x023);
    Symbol ASR_DefaultRules		= Format0.f0symbol(ASR_	      , 0x024);
    Symbol ASR_Dependent		= Format0.f0symbol(ASR_	      , 0x025);
    Symbol ASR_DetectionType		= Format0.f0symbol(ASR_	      , 0x026);
    Symbol ASR_Direction		= Format0.f0symbol(ASR_	      , 0x027);
    Symbol ASR_Discrete			= Format0.f0symbol(ASR_	      , 0x028);
    Symbol ASR_Duration			= Format0.f0symbol(ASR_	      , 0x029);
    Symbol ASR_EchoCancellation		= Format0.f0symbol(ASR_	      , 0x02A);
    Symbol ASR_EnabledEvents		= Format0.f0symbol(ASR_	      , 0x02B);
    Symbol ASR_Failure			= Format0.f0symbol(ASR_	      , 0x02C);
    Symbol ASR_Final			= Format0.f0symbol(ASR_	      , 0x02D);
    Symbol ASR_FinalTimeout		= Format0.f0symbol(ASR_	      , 0x02E);
    Symbol ASR_Garbage			= Format0.f0symbol(ASR_	      , 0x02F);
    Symbol ASR_GrammarBargeIn		= Format0.f0symbol(ASR_	      , 0x030);
    Symbol ASR_GrammarBargeInThreshold	= Format0.f0symbol(ASR_	      , 0x031);
    Symbol ASR_GrammarTag		= Format0.f0symbol(ASR_	      , 0x032);
    Symbol ASR_GrammarTags		= Format0.f0symbol(ASR_	      , 0x033);
    Symbol ASR_Identification		= Format0.f0symbol(ASR_	      , 0x034);
    Symbol ASR_Idle			= Format0.f0symbol(ASR_	      , 0x035);
    Symbol ASR_Immutable		= Format0.f0symbol(ASR_	      , 0x036);
    Symbol ASR_Inconsistent		= Format0.f0symbol(ASR_	      , 0x037);
    Symbol ASR_Independent		= Format0.f0symbol(ASR_	      , 0x038);
    Symbol ASR_InitialTimeout		= Format0.f0symbol(ASR_	      , 0x039);
    Symbol ASR_Intermediate		= Format0.f0symbol(ASR_	      , 0x03A);
    Symbol ASR_IntermediateResults	= Format0.f0symbol(ASR_	      , 0x03B);
    Symbol ASR_IntermediateResultsReady	= Format0.f0symbol(ASR_	      , 0x03C);
    Symbol ASR_InvalidUtterance		= Format0.f0symbol(ASR_	      , 0x03D);
    Symbol ASR_JSGF			= Format0.f0symbol(ASR_	      , 0x03E);
    Symbol ASR_Keys			= Format0.f0symbol(ASR_	      , 0x03F);
    Symbol ASR_KeyCount			= Format0.f0symbol(ASR_	      , 0x040);
    Symbol ASR_Label			= Format0.f0symbol(ASR_	      , 0x041);
    Symbol ASR_LoadableContext		= Format0.f0symbol(ASR_	      , 0x042);
    Symbol ASR_LoadedContext		= Format0.f0symbol(ASR_	      , 0x043);
    Symbol ASR_LoadedContexts		= Format0.f0symbol(ASR_	      , 0x044);
    Symbol ASR_LoadedWords		= Format0.f0symbol(ASR_	      , 0x045);
    Symbol ASR_Mutable			= Format0.f0symbol(ASR_	      , 0x046);
    Symbol ASR_Noisy			= Format0.f0symbol(ASR_	      , 0x047);
    Symbol ASR_Normal			= Format0.f0symbol(ASR_	      , 0x048);
    Symbol ASR_NotModifiable		= Format0.f0symbol(ASR_	      , 0x049);
    Symbol ASR_NotReady			= Format0.f0symbol(ASR_	      , 0x04A);
    Symbol ASR_NumberRepetitions	= Format0.f0symbol(ASR_	      , 0x04B);
    Symbol ASR_NumberWordsRequested	= Format0.f0symbol(ASR_	      , 0x04C);
    Symbol ASR_NumChoices		= Format0.f0symbol(ASR_	      , 0x04D);
    Symbol ASR_NumSequences		= Format0.f0symbol(ASR_	      , 0x04E);
    Symbol ASR_NumTokens		= Format0.f0symbol(ASR_	      , 0x04F);
    Symbol ASR_OutputType		= Format0.f0symbol(ASR_	      , 0x050);
    Symbol ASR_Phonetic			= Format0.f0symbol(ASR_	      , 0x051);
    /** recognize from stored input. */
    Symbol ASR_PlayInput		= Format0.f0symbol(ASR_	      , 0x052);
    Symbol ASR_PrivateRules		= Format0.f0symbol(ASR_	      , 0x053);
    Symbol ASR_Program			= Format0.f0symbol(ASR_	      , 0x054);
    Symbol ASR_PublicRules		= Format0.f0symbol(ASR_	      , 0x055);
    // not in S.100-R2, reference is Message_Qualifier
    // Symbol ASR_Qualifier		= Format0.f0symbol(ASR_	      , 0x056);
    Symbol ASR_Readiness		= Format0.f0symbol(ASR_	      , 0x057);
    Symbol ASR_Ready			= Format0.f0symbol(ASR_	      , 0x058);
    Symbol ASR_Recognition		= Format0.f0symbol(ASR_	      , 0x059);
    Symbol ASR_RecognitionPaused	= Format0.f0symbol(ASR_	      , 0x05A);
    Symbol ASR_RecognitionResults	= Format0.f0symbol(ASR_	      , 0x05B);
    Symbol ASR_RecognitionSequences	= Format0.f0symbol(ASR_	      , 0x05C);
    Symbol ASR_RecognitionStarted	= Format0.f0symbol(ASR_	      , 0x05D);
    Symbol ASR_Recognize		= Format0.f0symbol(ASR_	      , 0x05E);
    Symbol ASR_RecognizeStarted		= Format0.f0symbol(ASR_	      , 0x05F);
    Symbol ASR_Recognizing		= Format0.f0symbol(ASR_	      , 0x060);
    Symbol ASR_Rejected			= Format0.f0symbol(ASR_	      , 0x061);
    /** Attribute: capable of storing input (was 0xB6 in  pre-release) */
    Symbol ASR_RepeatRecognition	= Format0.f0symbol(ASR_	      , 0x062);
    Symbol ASR_ResContext		= Format0.f0symbol(ASR_	      , 0x063);
    Symbol ASR_ResultPresentation	= Format0.f0symbol(ASR_	      , 0x064);
    Symbol ASR_ResultsAvailable		= Format0.f0symbol(ASR_	      , 0x065);
    Symbol ASR_ResultType		= Format0.f0symbol(ASR_	      , 0x066);
    Symbol ASR_Retrain			= Format0.f0symbol(ASR_	      , 0x067);
    Symbol ASR_RetrieveRecognition	= Format0.f0symbol(ASR_	      , 0x068);
    Symbol ASR_RuleExpansion		= Format0.f0symbol(ASR_	      , 0x069);
    Symbol ASR_RuleExpansionGet		= Format0.f0symbol(ASR_	      , 0x06A);
    Symbol ASR_RuleExpansionSet		= Format0.f0symbol(ASR_	      , 0x06B);
    Symbol ASR_Rules			= Format0.f0symbol(ASR_	      , 0x06C);
    Symbol ASR_SequenceContexts		= Format0.f0symbol(ASR_	      , 0x06D);
    Symbol ASR_SequenceLanguages	= Format0.f0symbol(ASR_	      , 0x06E);
    Symbol ASR_SequenceLengths		= Format0.f0symbol(ASR_	      , 0x06F);
    Symbol ASR_SequenceQualifier	= Format0.f0symbol(ASR_	      , 0x070);
    Symbol ASR_SequenceScore		= Format0.f0symbol(ASR_	      , 0x071);
    Symbol ASR_SequenceSpeaker		= Format0.f0symbol(ASR_	      , 0x072);
    Symbol ASR_Silence			= Format0.f0symbol(ASR_	      , 0x073);
    Symbol ASR_Size			= Format0.f0symbol(ASR_	      , 0x074);
    // Not mentioned in S.100-R2 PDF [not a "key" in any table]
    // Symbol ASR_Speaker		= Format0.f0symbol(ASR_	      , 0x075);
    Symbol ASR_SpeakerType		= Format0.f0symbol(ASR_	      , 0x076);
    Symbol ASR_Specific			= Format0.f0symbol(ASR_	      , 0x077);
    Symbol ASR_SpecificUtterance	= Format0.f0symbol(ASR_	      , 0x078);
    Symbol ASR_Speech			= Format0.f0symbol(ASR_	      , 0x079);
    Symbol ASR_SpeechDetected		= Format0.f0symbol(ASR_	      , 0x07A);
    Symbol ASR_Spotting			= Format0.f0symbol(ASR_	      , 0x07B);
    Symbol ASR_Start			= Format0.f0symbol(ASR_	      , 0x07C);
    Symbol ASR_StartPaused		= Format0.f0symbol(ASR_	      , 0x07D);
    Symbol ASR_State			= Format0.f0symbol(ASR_	      , 0x07E);
    /** use RepeatRecognition buffer */
    Symbol ASR_StoreInput		= Format0.f0symbol(ASR_	      , 0x07F);
    Symbol ASR_Success			= Format0.f0symbol(ASR_	      , 0x080);
    Symbol ASR_Text			= Format0.f0symbol(ASR_	      , 0x081);
    Symbol ASR_TokenQualifiers		= Format0.f0symbol(ASR_	      , 0x082);
    Symbol ASR_TokenRow			= Format0.f0symbol(ASR_	      , 0x083);
    Symbol ASR_Tokens			= Format0.f0symbol(ASR_	      , 0x084);
    Symbol ASR_TokenScores		= Format0.f0symbol(ASR_	      , 0x085);
    Symbol ASR_TopChoices		= Format0.f0symbol(ASR_	      , 0x086);
    Symbol ASR_Trainable		= Format0.f0symbol(ASR_	      , 0x087);
    Symbol ASR_Training			= Format0.f0symbol(ASR_	      , 0x088);
    Symbol ASR_TrainingInfo		= Format0.f0symbol(ASR_	      , 0x089);
    Symbol ASR_TrainingModifiable	= Format0.f0symbol(ASR_	      , 0x08A);
    Symbol ASR_TrainingPaused		= Format0.f0symbol(ASR_	      , 0x08B);
    Symbol ASR_TrainingResult		= Format0.f0symbol(ASR_	      , 0x08C);
    Symbol ASR_TrainingType		= Format0.f0symbol(ASR_	      , 0x08D);
    Symbol ASR_TrainStarted		= Format0.f0symbol(ASR_	      , 0x08E);
    Symbol ASR_Type			= Format0.f0symbol(ASR_	      , 0x08F);
    Symbol ASR_TypeI			= Format0.f0symbol(ASR_	      , 0x090);
    Symbol ASR_TypeII			= Format0.f0symbol(ASR_	      , 0x091);
    Symbol ASR_Unsuccessful		= Format0.f0symbol(ASR_	      , 0x092);
    Symbol ASR_UpdateParameters		= Format0.f0symbol(ASR_	      , 0x093);
    Symbol ASR_UpdateParametersList	= Format0.f0symbol(ASR_	      , 0x094);
    Symbol ASR_Utterance		= Format0.f0symbol(ASR_	      , 0x095);
    Symbol ASR_UtteranceType		= Format0.f0symbol(ASR_	      , 0x096);
    Symbol ASR_UtteranceValidation	= Format0.f0symbol(ASR_	      , 0x097);
    Symbol ASR_ValidUtterance		= Format0.f0symbol(ASR_	      , 0x098);
    Symbol ASR_ValidUtteranceFinal	= Format0.f0symbol(ASR_	      , 0x099);
    Symbol ASR_ValidUtteranceFound	= Format0.f0symbol(ASR_	      , 0x09A);
    // use Language_Variant
    // Symbol ASR_Variant		= Format0.f0symbol(ASR_	      , 0x09B);
    // use ASR_ResourceVendor
    // Symbol ASR_Vendor		= Format0.f0symbol(ASR_	      , 0x09C);
    Symbol ASR_Verification		= Format0.f0symbol(ASR_	      , 0x09D);
    // use ASR_ResourceVersion [s.100-r1 holdover?]
    // Symbol ASR_Version		= Format0.f0symbol(ASR_	      , 0x09E);
    Symbol ASR_Warning			= Format0.f0symbol(ASR_	      , 0x09F);
    Symbol ASR_WordCommit		= Format0.f0symbol(ASR_	      , 0x0A0);
    Symbol ASR_WordCreate		= Format0.f0symbol(ASR_	      , 0x0A1);
    Symbol ASR_WordDeleteLastUtterance	= Format0.f0symbol(ASR_	      , 0x0A2);
    Symbol ASR_WordDeleteTraining	= Format0.f0symbol(ASR_	      , 0x0A3);
    Symbol ASR_WordDestroy		= Format0.f0symbol(ASR_	      , 0x0A4);
    Symbol ASR_WordList			= Format0.f0symbol(ASR_	      , 0x0A5);
    Symbol ASR_WordName			= Format0.f0symbol(ASR_	      , 0x0A6);
    Symbol ASR_WordString		= Format0.f0symbol(ASR_	      , 0x0A7);
    Symbol ASR_WordTrain		= Format0.f0symbol(ASR_	      , 0x0A8);
    Symbol ASR_WordTrained		= Format0.f0symbol(ASR_	      , 0x0A9);
    
    // left out of S.100-R2

    /** for direction argument of contextCopy() */
    Symbol ASR_ToResource		= Format0.f0symbol(ASR_	      , 0x0AA);
    /** for direction argument of contextCopy() */
    Symbol ASR_FromResource		= Format0.f0symbol(ASR_	      , 0x0AB);
    Symbol ASR_RuleName			= Format0.f0symbol(ASR_	      , 0x0AC);
    // obsolete: from s100-R1
    // Symbol ASR_ContextList		= Format0.f0symbol(ASR_	      , 0x0AE);
    // s410 draft insanity: use Lanugage_XXX instead 
    // Symbol ASR_English		= Format0.f0symbol(ASR_	      , 0x0AF);
    // Symbol ASR_Italian		= Format0.f0symbol(ASR_	      , 0x0B0);
    // Symbol ASR_Language		= Format0.f0symbol(ASR_	      , 0x0B1);
    // s410 draft insanity: use ASR_Start */
    // Symbol ASR_StartRecognition 	= Format0.f0symbol(ASR_	      , 0x0B2);

    /** for direction argument of contextCopy() */
    Symbol ASR_ToResourceTraining	= Format0.f0symbol(ASR_	      , 0x0B3);
    // s410 draft insanity: typo in S.100-R2, use  ASR_TokenQualifiers
    // Symbol ASR_TokenQualifier	= Format0.f0symbol(ASR_	      , 0x0B4);
    Symbol ASR_WordTemp			= Format0.f0symbol(ASR_	      , 0x0B5);

    /* added for S.410 */
    /* in S.100R2, CTasr_RetrieveRecognition() is really two functions
     * overloaded onto a single command.
     * The two commands/events are identified by a subkey: ASR_ResultType
     * which can be either {ASR_Intermediate or ASR_Final}
     * This key is set in the command, and is returned in the event.
     * For S.410, we use that value directly as the CommandID/eventID.
     */
    /** mapped to RetrieveRecognition->ResultType = ASR_Intermediate */
    Symbol ASR_GetResults		= ASR_Intermediate;
    /** mapped to RetrieveRecognition->ResultType = ASR_Final  results */
    Symbol ASR_GetFinalResults		= ASR_Final;

    /***************************************************************
     * CCR: Call Channel Resource Symbols.
     **************************************************************/
    Symbol CCR_ResourceClass		= Format0.f0symbol(CCR_	      , 0x000);
    Symbol CCR_ResourceID		= Format0.f0symbol(CCR_	      , 0x001);
    Symbol CCR_ResourceName		= Format0.f0symbol(CCR_	      , 0x002);
    Symbol CCR_ResourceVendor		= Format0.f0symbol(CCR_	      , 0x003);
    Symbol CCR_ResourceVersion		= Format0.f0symbol(CCR_	      , 0x004);
    Symbol CCR_NetworkID		= Format0.f0symbol(CCR_	      , 0x006);
    Symbol CCR_Stop			= Format0.f0symbol(CCR_	      , 0x007);
    Symbol CCR_Active			= Format0.f0symbol(CCR_	      , 0x010);
    Symbol CCR_CallPath			= Format0.f0symbol(CCR_	      , 0x011);
    Symbol CCR_CAPI			= Format0.f0symbol(CCR_	      , 0x012);
    Symbol CCR_CTC			= Format0.f0symbol(CCR_	      , 0x013);
    Symbol CCR_DeviceName		= Format0.f0symbol(CCR_	      , 0x014);
    Symbol CCR_Hold			= Format0.f0symbol(CCR_	      , 0x015);
    Symbol CCR_Idle			= Format0.f0symbol(CCR_	      , 0x016);
    Symbol CCR_IdleCondition		= Format0.f0symbol(CCR_	      , 0x017);
    Symbol CCR_JTAPI			= Format0.f0symbol(CCR_	      , 0x018);
    Symbol CCR_NonIdleTime		= Format0.f0symbol(CCR_	      , 0x019);
    Symbol CCR_OnHold			= Format0.f0symbol(CCR_	      , 0x01A);
    Symbol CCR_ProviderType		= Format0.f0symbol(CCR_	      , 0x01B);
    Symbol CCR_ServiceProviderID	= Format0.f0symbol(CCR_	      , 0x01C);
    Symbol CCR_State			= Format0.f0symbol(CCR_	      , 0x01D);
    Symbol CCR_StateChangeEvent		= Format0.f0symbol(CCR_	      , 0x01E);
    Symbol CCR_TAPI			= Format0.f0symbol(CCR_	      , 0x01F);
    Symbol CCR_TSAPI			= Format0.f0symbol(CCR_	      , 0x020);
    Symbol CCR_XTel			= Format0.f0symbol(CCR_	      , 0x021);

    /***************************************************************
     * CPR: Conference Port Resource Symbols. 
     **************************************************************/
    Symbol CPR_ResourceClass		= Format0.f0symbol(CPR_	      , 0x000);
    Symbol CPR_ResourceID		= Format0.f0symbol(CPR_	      , 0x001);
    Symbol CPR_ResourceName		= Format0.f0symbol(CPR_	      , 0x002);
    Symbol CPR_ResourceVendor		= Format0.f0symbol(CPR_	      , 0x003);
    Symbol CPR_ResourceVersion		= Format0.f0symbol(CPR_	      , 0x004);
    Symbol CPR_NetworkID		= Format0.f0symbol(CPR_	      , 0x005);
    Symbol CPR_Stop			= Format0.f0symbol(CPR_	      , 0x007);

    Symbol CPR_NumLegs			= Format0.f0symbol(CPR_	      , 0x010);
    Symbol CPR_NumMonitors		= Format0.f0symbol(CPR_	      , 0x011);
    Symbol CPR_NumTalkOnly		= Format0.f0symbol(CPR_	      , 0x012);
    Symbol CPR_PartyID			= Format0.f0symbol(CPR_	      , 0x013);

    /***************************************************************
     * Container symbols.
     **************************************************************/
    Symbol Container_Class		= Format0.f0symbol(Container_ , 0x000);
    Symbol Container_88k8BitLinear	= Format0.f0symbol(Container_ , 0x001);
    Symbol Container_24kADPCM		= Format0.f0symbol(Container_ , 0x002);
    Symbol Container_32kADPCM		= Format0.f0symbol(Container_ , 0x003);
    Symbol Container_44kADPCM		= Format0.f0symbol(Container_ , 0x004);
    Symbol Container_48kALawPCM		= Format0.f0symbol(Container_ , 0x005);
    Symbol Container_48kMuLawPCM	= Format0.f0symbol(Container_ , 0x006);
    Symbol Container_64kALawPCM		= Format0.f0symbol(Container_ , 0x007);
    Symbol Container_64kMuLawPCM	= Format0.f0symbol(Container_ , 0x008);
    Symbol Container_48k8BitLinear	= Format0.f0symbol(Container_ , 0x009);
    Symbol Container_88kALawPCM		= Format0.f0symbol(Container_ , 0x00A);
    Symbol Container_88kMuLawPCM	= Format0.f0symbol(Container_ , 0x00B);
    Symbol Container_64k8BitLinear	= Format0.f0symbol(Container_ , 0x00C);
    Symbol Container_AccessCopy		= Format0.f0symbol(Container_ , 0x00D);
    Symbol Container_AccessMode		= Format0.f0symbol(Container_ , 0x00E);
    Symbol Container_AccessRead		= Format0.f0symbol(Container_ , 0x00F);
    Symbol Container_AccessWrite	= Format0.f0symbol(Container_ , 0x010);
    Symbol Container_ACT		= Format0.f0symbol(Container_ , 0x011);
    Symbol Container_ADSI		= Format0.f0symbol(Container_ , 0x012);
    Symbol Container_ASCII		= Format0.f0symbol(Container_ , 0x013);
    Symbol Container_ASCII447		= Format0.f0symbol(Container_ , 0x014);
    Symbol Container_AsciiBytes		= Format0.f0symbol(Container_ , 0x015);
    Symbol Container_AsciiCPI		= Format0.f0symbol(Container_ , 0x016);
    Symbol Container_AsciiLineSpace	= Format0.f0symbol(Container_ , 0x017);
    Symbol Container_AsciiMargins	= Format0.f0symbol(Container_ , 0x018);
    Symbol Container_AsciiPadFlag	= Format0.f0symbol(Container_ , 0x019);
    Symbol Container_Begin		= Format0.f0symbol(Container_ , 0x01A);
    Symbol Container_BFT		= Format0.f0symbol(Container_ , 0x01B);
    Symbol Container_BytesWritten	= Format0.f0symbol(Container_ , 0x01C);
    Symbol Container_ChangeMode		= Format0.f0symbol(Container_ , 0x01D);
    Symbol Container_CloseObject	= Format0.f0symbol(Container_ , 0x01E);
    Symbol Container_Concat		= Format0.f0symbol(Container_ , 0x01F);
    Symbol Container_ContainerInfo	= Format0.f0symbol(Container_ , 0x020);
    Symbol Container_Copy		= Format0.f0symbol(Container_ , 0x021);
    /** EventID & cmdID for ContainerService.createContainer method. */
    Symbol Container_Create		= Format0.f0symbol(Container_ , 0x022);
    Symbol Container_Created		= Format0.f0symbol(Container_ , 0x023);
    Symbol Container_Current		= Format0.f0symbol(Container_ , 0x024);
    Symbol Container_DCX		= Format0.f0symbol(Container_ , 0x025);
    Symbol Container_Destroy		= Format0.f0symbol(Container_ , 0x026);
    Symbol Container_Duration		= Format0.f0symbol(Container_ , 0x027);
    Symbol Container_End		= Format0.f0symbol(Container_ , 0x028);
    // reference is to an int in bitmask, typo in S.100-R2 */
    Symbol Container_Exclusive		= Format0.f0symbol(Container_ , 0x029);
    Symbol Container_Filename		= Format0.f0symbol(Container_ , 0x02A);
    Symbol Container_FileName		= Format0.f0symbol(Container_ , 0x02A);
    Symbol Container_FullName		= Format0.f0symbol(Container_ , 0x02B);
    /** @deprecated use Container_GetInfo (has same value) */
    Symbol Container_GetContainerInfo	= Format0.f0symbol(Container_ , 0x02C);
    Symbol Container_GetInfo		= Format0.f0symbol(Container_ , 0x02C);
    Symbol Container_GetObjectList	= Format0.f0symbol(Container_ , 0x02D);
    Symbol Container_GetParameters	= Format0.f0symbol(Container_ , 0x02E);
    Symbol Container_Indirect		= Format0.f0symbol(Container_ , 0x02F);
    Symbol Container_InputBuffer	= Format0.f0symbol(Container_ , 0x030);
    Symbol Container_InputParameters	= Format0.f0symbol(Container_ , 0x031);
    Symbol Container_LastAccessed	= Format0.f0symbol(Container_ , 0x032);
    Symbol Container_LastChanged	= Format0.f0symbol(Container_ , 0x033);
    /** actual media type in this MDO. */
    Symbol Container_MediaType		= Format0.f0symbol(Container_ , 0x034);
    /** acceptable media types for this MDO. */
    Symbol Container_MediaTypes		= Format0.f0symbol(Container_ , 0x035);
    Symbol Container_NElems		= Format0.f0symbol(Container_ , 0x036);
    // Number of OutputParameters (sic). 
    // Note: OutputParameters are an Array in a KVSet
    // and the KVSet records the length internally.
    // Note: This name also breaks several naming conventions.
    // deleted: this key has no real use.
    // Symbol Container_nOutputParameters= Format0.f0symbol(Container_ , 0x037);
    Symbol Container_ObjectList		= Format0.f0symbol(Container_ , 0x038);
    Symbol Container_OpenObject		= Format0.f0symbol(Container_ , 0x039);
    Symbol Container_OutputBuffer	= Format0.f0symbol(Container_ , 0x03A);
    Symbol Container_OutputCount	= Format0.f0symbol(Container_ , 0x03B);
    Symbol Container_PosEnd		= Format0.f0symbol(Container_ , 0x03C);
    Symbol Container_Position		= Format0.f0symbol(Container_ , 0x03D);
    Symbol Container_PosStart		= Format0.f0symbol(Container_ , 0x03E);
    /** @deprecated S.100-R2 typo: correct name is Container_PutInfo */
    Symbol Container_PutUserInfo	= Format0.f0symbol(Container_ , 0x03F);
    /** command/event ID for putInfo command */
    Symbol Container_PutInfo		= Format0.f0symbol(Container_ , 0x03F);
    Symbol Container_ReadContents	= Format0.f0symbol(Container_ , 0x040);
    Symbol Container_Reference		= Format0.f0symbol(Container_ , 0x041);
    Symbol Container_Rename		= Format0.f0symbol(Container_ , 0x042);
    Symbol Container_SAPI		= Format0.f0symbol(Container_ , 0x043);
    Symbol Container_Seek		= Format0.f0symbol(Container_ , 0x044);
    Symbol Container_SeekSize		= Format0.f0symbol(Container_ , 0x045);
    Symbol Container_Sentences		= Format0.f0symbol(Container_ , 0x046);
    Symbol Container_SetParameters	= Format0.f0symbol(Container_ , 0x047);
    Symbol Container_Size		= Format0.f0symbol(Container_ , 0x048);
    Symbol Container_SPIFF		= Format0.f0symbol(Container_ , 0x049);
    Symbol Container_StreamHandle	= Format0.f0symbol(Container_ , 0x04A);
    Symbol Container_SubDialect		= Format0.f0symbol(Container_ , 0x04B);
    Symbol Container_TDD		= Format0.f0symbol(Container_ , 0x04C);
    Symbol Container_TIFF		= Format0.f0symbol(Container_ , 0x04D);
    // reference is to an int in bitmask, typo in S.100-R2 */
    Symbol Container_Truncate		= Format0.f0symbol(Container_ , 0x04E);
    Symbol Container_Unicode		= Format0.f0symbol(Container_ , 0x04F);
    Symbol Container_VoiceView		= Format0.f0symbol(Container_ , 0x050);
    Symbol Container_WriteContents	= Format0.f0symbol(Container_ , 0x051);

    // Add for S.400?
    /** used in copy() and rename() */
    Symbol Container_TargetName		= Format0.f0symbol(Container_ , 0x052);
    Symbol Container_Flags		= Format0.f0symbol(Container_ , 0x053);

    Symbol Container_Bytes		= Format0.f0symbol(Container_ , 0x055);
    Symbol Container_MilliSeconds	= Format0.f0symbol(Container_ , 0x056);
    Symbol Container_MDO		= Format0.f0symbol(Container_ , 0x057);
    Symbol Container_Fail		= Format0.f0symbol(Container_ , 0x058);

    // Missing from S.100-R2!
    /** Chr tag as value for attribute Container_SapiOptions. */
    Symbol Container_SAPIChr		= Format0.f0symbol(Container_ , 0x060);
    /** Ctx tag as value for attribute Container_SapiOptions. */
    Symbol Container_SAPICtx		= Format0.f0symbol(Container_ , 0x061);
    /** Mrk tag as value for attribute Container_SapiOptions. */
    Symbol Container_SAPIMrk		= Format0.f0symbol(Container_ , 0x062);
    /** Pro tag as value for attribute Container_SapiOptions. */
    Symbol Container_SAPIPro		= Format0.f0symbol(Container_ , 0x063);
    /** Prt tag as value for attribute Container_SapiOptions. */
    Symbol Container_SAPIPrt		= Format0.f0symbol(Container_ , 0x064);
    /** Vce tag as value for attribute Container_SapiOptions. */
    Symbol Container_SAPIVce		= Format0.f0symbol(Container_ , 0x065);

    /***************************************************************
     * FaxSender: Fax Sender Symbols.
     **************************************************************/
    Symbol FaxSender_ResourceClass	= Format0.f0symbol(FaxSender_ , 0x000);
    Symbol FaxSender_ResourceID		= Format0.f0symbol(FaxSender_ , 0x001);
    Symbol FaxSender_ResourceName	= Format0.f0symbol(FaxSender_ , 0x002);
    Symbol FaxSender_ResourceVendor	= Format0.f0symbol(FaxSender_ , 0x003);
    Symbol FaxSender_ResourceVersion	= Format0.f0symbol(FaxSender_ , 0x004);
    Symbol FaxSender_DynamicallyAllocated= Format0.f0symbol(FaxSender_, 0x005);
    Symbol FaxSender_NetworkID		= Format0.f0symbol(FaxSender_ , 0x006);
    Symbol FaxSender_Stop		= Format0.f0symbol(FaxSender_ , 0x007);
    Symbol FaxSender_AutoFooter		= Format0.f0symbol(FaxSender_ , 0x010);
    Symbol FaxSender_AutoHeader		= Format0.f0symbol(FaxSender_ , 0x011);
    Symbol FaxSender_Basic		= Format0.f0symbol(FaxSender_ , 0x012);
    Symbol FaxSender_BasicFooter	= Format0.f0symbol(FaxSender_ , 0x013);
    Symbol FaxSender_BasicHeader	= Format0.f0symbol(FaxSender_ , 0x014);
    Symbol FaxSender_BLJBIG		= Format0.f0symbol(FaxSender_ , 0x015);
    Symbol FaxSender_Data		= Format0.f0symbol(FaxSender_ , 0x016);
    Symbol FaxSender_ECM		= Format0.f0symbol(FaxSender_ , 0x017);
    Symbol FaxSender_EnabledEvents	= Format0.f0symbol(FaxSender_ , 0x018);
    Symbol FaxSender_EncodeTranslate	= Format0.f0symbol(FaxSender_ , 0x019);
    Symbol FaxSender_ExtendedFooter	= Format0.f0symbol(FaxSender_ , 0x01A);
    Symbol FaxSender_ExtendedHeader	= Format0.f0symbol(FaxSender_ , 0x01B);
    Symbol FaxSender_FaxID		= Format0.f0symbol(FaxSender_ , 0x01C);
    Symbol FaxSender_Fine		= Format0.f0symbol(FaxSender_ , 0x01D);
    Symbol FaxSender_FirstPageNum	= Format0.f0symbol(FaxSender_ , 0x01E);
    Symbol FaxSender_FooterField	= Format0.f0symbol(FaxSender_ , 0x01F);
    Symbol FaxSender_FooterLength	= Format0.f0symbol(FaxSender_ , 0x020);
    Symbol FaxSender_FooterPlacement	= Format0.f0symbol(FaxSender_ , 0x021);
    Symbol FaxSender_Footers		= Format0.f0symbol(FaxSender_ , 0x022);
    Symbol FaxSender_HeaderField	= Format0.f0symbol(FaxSender_ , 0x023);
    Symbol FaxSender_HeaderLength	= Format0.f0symbol(FaxSender_ , 0x024);
    Symbol FaxSender_HeaderPageNum	= Format0.f0symbol(FaxSender_ , 0x025);
    Symbol FaxSender_HeaderPlacement	= Format0.f0symbol(FaxSender_ , 0x026);
    Symbol FaxSender_Headers		= Format0.f0symbol(FaxSender_ , 0x027);
    Symbol FaxSender_Idle		= Format0.f0symbol(FaxSender_ , 0x028);
    Symbol FaxSender_Insert		= Format0.f0symbol(FaxSender_ , 0x029);
    Symbol FaxSender_LineEncoding	= Format0.f0symbol(FaxSender_ , 0x02A);
    Symbol FaxSender_Local		= Format0.f0symbol(FaxSender_ , 0x02B);
    Symbol FaxSender_MH			= Format0.f0symbol(FaxSender_ , 0x02C);
    Symbol FaxSender_MMR		= Format0.f0symbol(FaxSender_ , 0x02D);
    Symbol FaxSender_Modulation		= Format0.f0symbol(FaxSender_ , 0x02E);
    Symbol FaxSender_MR			= Format0.f0symbol(FaxSender_ , 0x02F);
    Symbol FaxSender_Negotiate		= Format0.f0symbol(FaxSender_ , 0x030);
    Symbol FaxSender_NoECM		= Format0.f0symbol(FaxSender_ , 0x031);
    Symbol FaxSender_Overlay		= Format0.f0symbol(FaxSender_ , 0x032);
    Symbol FaxSender_Page		= Format0.f0symbol(FaxSender_ , 0x033);
    Symbol FaxSender_PagesTransferred	= Format0.f0symbol(FaxSender_ , 0x034);
    Symbol FaxSender_PageWidth		= Format0.f0symbol(FaxSender_ , 0x035);
    Symbol FaxSender_Password		= Format0.f0symbol(FaxSender_ , 0x036);
    Symbol FaxSender_PolledSend		= Format0.f0symbol(FaxSender_ , 0x037);
    Symbol FaxSender_Ready		= Format0.f0symbol(FaxSender_ , 0x038);
    // interesting... probable copy error from FaxReciever_RecieveStart:
    // or maybe this happens if you are in Polled mode?
    Symbol FaxSender_ReceiveStart	= Format0.f0symbol(FaxSender_ , 0x039);
    Symbol FaxSender_Remote		= Format0.f0symbol(FaxSender_ , 0x03A);
    Symbol FaxSender_RemoteID		= Format0.f0symbol(FaxSender_ , 0x03B);
    Symbol FaxSender_Replace		= Format0.f0symbol(FaxSender_ , 0x03C);
    Symbol FaxSender_Resolution		= Format0.f0symbol(FaxSender_ , 0x03D);
    Symbol FaxSender_ScanTime		= Format0.f0symbol(FaxSender_ , 0x03E);
    Symbol FaxSender_Selective		= Format0.f0symbol(FaxSender_ , 0x03F);
    Symbol FaxSender_Send		= Format0.f0symbol(FaxSender_ , 0x040);
    Symbol FaxSender_SenderID		= Format0.f0symbol(FaxSender_ , 0x041);
    Symbol FaxSender_Sending		= Format0.f0symbol(FaxSender_ , 0x042);
    Symbol FaxSender_SendStart		= Format0.f0symbol(FaxSender_ , 0x043);
    Symbol FaxSender_SEP		= Format0.f0symbol(FaxSender_ , 0x044);
    Symbol FaxSender_SMPageNum		= Format0.f0symbol(FaxSender_ , 0x045);
    Symbol FaxSender_SMType		= Format0.f0symbol(FaxSender_ , 0x046);
    Symbol FaxSender_Standard		= Format0.f0symbol(FaxSender_ , 0x047);
    Symbol FaxSender_StandByPoll	= Format0.f0symbol(FaxSender_ , 0x048);
    Symbol FaxSender_Start		= Format0.f0symbol(FaxSender_ , 0x049);
    Symbol FaxSender_StartMode		= Format0.f0symbol(FaxSender_ , 0x04A);
    Symbol FaxSender_StartReady		= Format0.f0symbol(FaxSender_ , 0x04B);
    Symbol FaxSender_State		= Format0.f0symbol(FaxSender_ , 0x04C);
    Symbol FaxSender_Subaddress		= Format0.f0symbol(FaxSender_ , 0x04D);
    Symbol FaxSender_TIFFReaderDtls	= Format0.f0symbol(FaxSender_ , 0x04E);
    Symbol FaxSender_TransferSpeed	= Format0.f0symbol(FaxSender_ , 0x04F);
    Symbol FaxSender_V17		= Format0.f0symbol(FaxSender_ , 0x050);
    Symbol FaxSender_V27ter		= Format0.f0symbol(FaxSender_ , 0x051);
    Symbol FaxSender_V29		= Format0.f0symbol(FaxSender_ , 0x052);

    // missing from S.100 
    Symbol FaxSender_SM			= Format0.f0symbol(FaxSender_ , 0x053);
    Symbol FaxSender_Resume		= Format0.f0symbol(FaxSender_ , 0x054);


    /***************************************************************
     * Fax Receiver Symbols.
     **************************************************************/
    Symbol FaxReceiver_ResourceClass	= Format0.f0symbol(FaxReceiver_, 0x000);
    Symbol FaxReceiver_ResourceID	= Format0.f0symbol(FaxReceiver_, 0x001);
    Symbol FaxReceiver_ResourceName	= Format0.f0symbol(FaxReceiver_, 0x002);
    Symbol FaxReceiver_ResourceVendor	= Format0.f0symbol(FaxReceiver_, 0x003);
    Symbol FaxReceiver_ResourceVersion	= Format0.f0symbol(FaxReceiver_, 0x004);
    Symbol FaxReceiver_DynamicallyAllocated= Format0.f0symbol(FaxReceiver_, 0x005);
    Symbol FaxReceiver_NetworkID	= Format0.f0symbol(FaxReceiver_, 0x006);
    Symbol FaxReceiver_Stop		= Format0.f0symbol(FaxReceiver_, 0x007);

    Symbol FaxReceiver_Autofooter	= Format0.f0symbol(FaxReceiver_, 0x010);
    Symbol FaxReceiver_Basic		= Format0.f0symbol(FaxReceiver_, 0x011);
    Symbol FaxReceiver_BasicFooter	= Format0.f0symbol(FaxReceiver_, 0x012);
    Symbol FaxReceiver_BLJBIG		= Format0.f0symbol(FaxReceiver_, 0x013);
    Symbol FaxReceiver_Data		= Format0.f0symbol(FaxReceiver_, 0x014);
    Symbol FaxReceiver_ECM		= Format0.f0symbol(FaxReceiver_, 0x015);
    Symbol FaxReceiver_EnabledEvents	= Format0.f0symbol(FaxReceiver_, 0x016);
    Symbol FaxReceiver_EncodeTranslate	= Format0.f0symbol(FaxReceiver_, 0x017);
    Symbol FaxReceiver_ExtendedFooter	= Format0.f0symbol(FaxReceiver_, 0x018);
    Symbol FaxReceiver_FaxID		= Format0.f0symbol(FaxReceiver_, 0x019);
    Symbol FaxReceiver_Fine		= Format0.f0symbol(FaxReceiver_, 0x01A);
    Symbol FaxReceiver_FooterField	= Format0.f0symbol(FaxReceiver_, 0x01B);
    Symbol FaxReceiver_FooterLength	= Format0.f0symbol(FaxReceiver_, 0x01C);
    Symbol FaxReceiver_FooterPlacement	= Format0.f0symbol(FaxReceiver_, 0x01D);
    Symbol FaxReceiver_Footers		= Format0.f0symbol(FaxReceiver_, 0x01E);
    Symbol FaxReceiver_HeaderPageNum	= Format0.f0symbol(FaxReceiver_, 0x01F);
    Symbol FaxReceiver_Idle		= Format0.f0symbol(FaxReceiver_, 0x020);
    Symbol FaxReceiver_Insert		= Format0.f0symbol(FaxReceiver_, 0x021);
    Symbol FaxReceiver_LineEncoding	= Format0.f0symbol(FaxReceiver_, 0x022);
    Symbol FaxReceiver_Local		= Format0.f0symbol(FaxReceiver_, 0x023);
    Symbol FaxReceiver_MH		= Format0.f0symbol(FaxReceiver_, 0x024);
    Symbol FaxReceiver_MMR		= Format0.f0symbol(FaxReceiver_, 0x025);
    Symbol FaxReceiver_Modulation	= Format0.f0symbol(FaxReceiver_, 0x026);
    Symbol FaxReceiver_MR		= Format0.f0symbol(FaxReceiver_, 0x027);
    Symbol FaxReceiver_Negotiate	= Format0.f0symbol(FaxReceiver_, 0x028);
    Symbol FaxReceiver_Overlay		= Format0.f0symbol(FaxReceiver_, 0x029);
    Symbol FaxReceiver_Page		= Format0.f0symbol(FaxReceiver_, 0x02A);
    Symbol FaxReceiver_PagesTransferred	= Format0.f0symbol(FaxReceiver_, 0x02B);
    Symbol FaxReceiver_PageWidth	= Format0.f0symbol(FaxReceiver_, 0x02C);
    Symbol FaxReceiver_Password		= Format0.f0symbol(FaxReceiver_, 0x02D);
    Symbol FaxReceiver_Poll		= Format0.f0symbol(FaxReceiver_, 0x02E);
    Symbol FaxReceiver_Ready		= Format0.f0symbol(FaxReceiver_, 0x02F);
    Symbol FaxReceiver_Receive		= Format0.f0symbol(FaxReceiver_, 0x030);
    Symbol FaxReceiver_ReceiveStart	= Format0.f0symbol(FaxReceiver_, 0x031);
    Symbol FaxReceiver_Receiving	= Format0.f0symbol(FaxReceiver_, 0x032);
    Symbol FaxReceiver_Remote		= Format0.f0symbol(FaxReceiver_, 0x033);
    Symbol FaxReceiver_RemoteID		= Format0.f0symbol(FaxReceiver_, 0x034);
    Symbol FaxReceiver_Replace		= Format0.f0symbol(FaxReceiver_, 0x035);
    Symbol FaxReceiver_Resolution	= Format0.f0symbol(FaxReceiver_, 0x036);
    Symbol FaxReceiver_ScanTime		= Format0.f0symbol(FaxReceiver_, 0x037);
    Symbol FaxReceiver_Selective	= Format0.f0symbol(FaxReceiver_, 0x038);
    Symbol FaxReceiver_SelPollkey	= Format0.f0symbol(FaxReceiver_, 0x039);
    Symbol FaxReceiver_SenderID		= Format0.f0symbol(FaxReceiver_, 0x03A);
    Symbol FaxReceiver_SMPageNum	= Format0.f0symbol(FaxReceiver_, 0x03B);
    Symbol FaxReceiver_SMType		= Format0.f0symbol(FaxReceiver_, 0x03C);
    Symbol FaxReceiver_Standard		= Format0.f0symbol(FaxReceiver_, 0x03D);
    Symbol FaxReceiver_Start		= Format0.f0symbol(FaxReceiver_, 0x03E);
    Symbol FaxReceiver_StartMode	= Format0.f0symbol(FaxReceiver_, 0x03F);
    Symbol FaxReceiver_StartReady	= Format0.f0symbol(FaxReceiver_, 0x040);
    Symbol FaxReceiver_Subaddress	= Format0.f0symbol(FaxReceiver_, 0x041);
    Symbol FaxReceiver_TIFFWriterDtls	= Format0.f0symbol(FaxReceiver_, 0x042);
    Symbol FaxReceiver_TransferSpeed	= Format0.f0symbol(FaxReceiver_, 0x043);
    Symbol FaxReceiver_V17		= Format0.f0symbol(FaxReceiver_, 0x044);
    Symbol FaxReceiver_V27ter		= Format0.f0symbol(FaxReceiver_, 0x045);
    Symbol FaxReceiver_V29		= Format0.f0symbol(FaxReceiver_, 0x046);
    // missing from S.100
    Symbol FaxReceiver_SM		= Format0.f0symbol(FaxReceiver_, 0x047);
    Symbol FaxReceiver_Resume		= Format0.f0symbol(FaxReceiver_, 0x048);
    Symbol FaxReceiver_State		= Format0.f0symbol(FaxReceiver_, 0x049);

    /***************************************************************
     * Faxll: Low Level Fax Symbols.
     **************************************************************/
    Symbol Faxll_ResourceClass		= Format0.f0symbol(Faxll_     , 0x000);
    Symbol Faxll_ResourceID		= Format0.f0symbol(Faxll_     , 0x001);
    Symbol Faxll_ResourceName		= Format0.f0symbol(Faxll_     , 0x002);
    Symbol Faxll_ResourceVendor		= Format0.f0symbol(Faxll_     , 0x003);
    Symbol Faxll_ResourceVersion	= Format0.f0symbol(Faxll_     , 0x004);
    Symbol Faxll_DynamicallyAllocated	= Format0.f0symbol(Faxll_     , 0x005);
    Symbol Faxll_NetworkID		= Format0.f0symbol(Faxll_     , 0x006);
    Symbol Faxll_Stop			= Format0.f0symbol(Faxll_     , 0x007);

    Symbol Faxll_Answer			= Format0.f0symbol(Faxll_     , 0x010);
    Symbol Faxll_AutoFooter		= Format0.f0symbol(Faxll_     , 0x011);
    Symbol Faxll_AutoHeader		= Format0.f0symbol(Faxll_     , 0x012);
    Symbol Faxll_BadScanLines		= Format0.f0symbol(Faxll_     , 0x013);
    Symbol Faxll_Basic			= Format0.f0symbol(Faxll_     , 0x014);
    Symbol Faxll_BasicFooter		= Format0.f0symbol(Faxll_     , 0x015);
    Symbol Faxll_BasicHeader		= Format0.f0symbol(Faxll_     , 0x016);
    Symbol Faxll_BeginNegotiate		= Format0.f0symbol(Faxll_     , 0x017);
    Symbol Faxll_BLJBIG			= Format0.f0symbol(Faxll_     , 0x018);
    Symbol Faxll_Call			= Format0.f0symbol(Faxll_     , 0x019);
    Symbol Faxll_Continue		= Format0.f0symbol(Faxll_     , 0x01A);
    Symbol Faxll_Data			= Format0.f0symbol(Faxll_     , 0x01B);
    Symbol Faxll_DCS			= Format0.f0symbol(Faxll_     , 0x01C);
    Symbol Faxll_DEC			= Format0.f0symbol(Faxll_     , 0x01D);
    Symbol Faxll_DER			= Format0.f0symbol(Faxll_     , 0x01E);
    Symbol Faxll_DES			= Format0.f0symbol(Faxll_     , 0x01F);
    Symbol Faxll_DIS			= Format0.f0symbol(Faxll_     , 0x020);
    Symbol Faxll_DNK			= Format0.f0symbol(Faxll_     , 0x021);
    Symbol Faxll_DocComplete		= Format0.f0symbol(Faxll_     , 0x022);
    Symbol Faxll_DTC			= Format0.f0symbol(Faxll_     , 0x023);
    Symbol Faxll_DTR			= Format0.f0symbol(Faxll_     , 0x024);
    Symbol Faxll_ECM			= Format0.f0symbol(Faxll_     , 0x025);
    Symbol Faxll_EnableEnableEvents	= Format0.f0symbol(Faxll_     , 0x026);
    Symbol Faxll_EncodeTranslate	= Format0.f0symbol(Faxll_     , 0x027);
    Symbol Faxll_End			= Format0.f0symbol(Faxll_     , 0x028);
    Symbol Faxll_EndOfPage		= Format0.f0symbol(Faxll_     , 0x029);
    Symbol Faxll_EndProcedure		= Format0.f0symbol(Faxll_     , 0x02A);
    Symbol Faxll_ExtendedFooter		= Format0.f0symbol(Faxll_     , 0x02B);
    Symbol Faxll_ExtendedHeader		= Format0.f0symbol(Faxll_     , 0x02C);
    Symbol Faxll_FaxID			= Format0.f0symbol(Faxll_     , 0x02D);
    Symbol Faxll_FaxOperation		= Format0.f0symbol(Faxll_     , 0x02E);
    Symbol Faxll_FDM			= Format0.f0symbol(Faxll_     , 0x02F);
    Symbol Faxll_Fine			= Format0.f0symbol(Faxll_     , 0x030);
    Symbol Faxll_FirstPageNum		= Format0.f0symbol(Faxll_     , 0x031);
    Symbol Faxll_FNV			= Format0.f0symbol(Faxll_     , 0x032);
    Symbol Faxll_FooterField		= Format0.f0symbol(Faxll_     , 0x033);
    Symbol Faxll_FooterLength		= Format0.f0symbol(Faxll_     , 0x034);
    Symbol Faxll_FooterPlacement	= Format0.f0symbol(Faxll_     , 0x035);
    Symbol Faxll_Footers		= Format0.f0symbol(Faxll_     , 0x036);
    Symbol Faxll_ForceNegotiate		= Format0.f0symbol(Faxll_     , 0x037);
    Symbol Faxll_HeaderField		= Format0.f0symbol(Faxll_     , 0x038);
    Symbol Faxll_HeaderLength		= Format0.f0symbol(Faxll_     , 0x039);
    Symbol Faxll_HeaderPageNum		= Format0.f0symbol(Faxll_     , 0x03A);
    Symbol Faxll_HeaderPlacement	= Format0.f0symbol(Faxll_     , 0x03B);
    Symbol Faxll_Headers		= Format0.f0symbol(Faxll_     , 0x03C);
    Symbol Faxll_Idle			= Format0.f0symbol(Faxll_     , 0x03D);
    Symbol Faxll_Init			= Format0.f0symbol(Faxll_     , 0x03E);
    Symbol Faxll_Insert			= Format0.f0symbol(Faxll_     , 0x03F);
    Symbol Faxll_LineEncoding		= Format0.f0symbol(Faxll_     , 0x040);
    Symbol Faxll_Local			= Format0.f0symbol(Faxll_     , 0x041);
    Symbol Faxll_MH			= Format0.f0symbol(Faxll_     , 0x042);
    Symbol Faxll_MMR			= Format0.f0symbol(Faxll_     , 0x043);
    Symbol Faxll_Modulation		= Format0.f0symbol(Faxll_     , 0x044);
    Symbol Faxll_MR			= Format0.f0symbol(Faxll_     , 0x045);
    Symbol Faxll_Negotiate		= Format0.f0symbol(Faxll_     , 0x046);
    Symbol Faxll_NoECM			= Format0.f0symbol(Faxll_     , 0x047);
    Symbol Faxll_NSC			= Format0.f0symbol(Faxll_     , 0x048);
    Symbol Faxll_NSF			= Format0.f0symbol(Faxll_     , 0x049);
    Symbol Faxll_NSS			= Format0.f0symbol(Faxll_     , 0x04A);
    Symbol Faxll_Overlay		= Format0.f0symbol(Faxll_     , 0x04B);
    Symbol Faxll_Page			= Format0.f0symbol(Faxll_     , 0x04C);
    Symbol Faxll_PageOffset		= Format0.f0symbol(Faxll_     , 0x04D);
    Symbol Faxll_Pages			= Format0.f0symbol(Faxll_     , 0x04E);
    Symbol Faxll_PageWidth		= Format0.f0symbol(Faxll_     , 0x04F);
    Symbol Faxll_Password		= Format0.f0symbol(Faxll_     , 0x050);
    Symbol Faxll_Poll			= Format0.f0symbol(Faxll_     , 0x051);
    Symbol Faxll_PolledSend		= Format0.f0symbol(Faxll_     , 0x052);
    Symbol Faxll_Ready			= Format0.f0symbol(Faxll_     , 0x053);
    Symbol Faxll_Receive		= Format0.f0symbol(Faxll_     , 0x054);
    Symbol Faxll_ReceivePages		= Format0.f0symbol(Faxll_     , 0x055);
    Symbol Faxll_Receiving		= Format0.f0symbol(Faxll_     , 0x056);
    Symbol Faxll_Remote			= Format0.f0symbol(Faxll_     , 0x057);
    Symbol Faxll_RemoteID		= Format0.f0symbol(Faxll_     , 0x058);
    Symbol Faxll_Renegotiate		= Format0.f0symbol(Faxll_     , 0x059);
    Symbol Faxll_Replace		= Format0.f0symbol(Faxll_     , 0x05A);
    Symbol Faxll_Resolution		= Format0.f0symbol(Faxll_     , 0x05B);
    Symbol Faxll_ScanTime		= Format0.f0symbol(Faxll_     , 0x05C);
    Symbol Faxll_Selective		= Format0.f0symbol(Faxll_     , 0x05D);
    Symbol Faxll_SelPollKey		= Format0.f0symbol(Faxll_     , 0x05E);
    Symbol Faxll_SenderID		= Format0.f0symbol(Faxll_     , 0x05F);
    Symbol Faxll_Sending		= Format0.f0symbol(Faxll_     , 0x060);
    Symbol Faxll_SendPage		= Format0.f0symbol(Faxll_     , 0x061);
    Symbol Faxll_SEP			= Format0.f0symbol(Faxll_     , 0x062);
    Symbol Faxll_SMPageNum		= Format0.f0symbol(Faxll_     , 0x063);
    Symbol Faxll_SMType			= Format0.f0symbol(Faxll_     , 0x064);
    Symbol Faxll_Speed			= Format0.f0symbol(Faxll_     , 0x065);
    Symbol Faxll_Standard		= Format0.f0symbol(Faxll_     , 0x066);
    Symbol Faxll_State			= Format0.f0symbol(Faxll_     , 0x067);
    Symbol Faxll_Subaddress		= Format0.f0symbol(Faxll_     , 0x068);
    Symbol Faxll_TIFFReaderDtls		= Format0.f0symbol(Faxll_     , 0x069);
    // typo in S.100-r2
    Symbol Faxll_TIFFWriterDtls		= Format0.f0symbol(Faxll_     , 0x06A);
    Symbol Faxll_Transfer		= Format0.f0symbol(Faxll_     , 0x06B);
    Symbol Faxll_Transferred		= Format0.f0symbol(Faxll_     , 0x06C);
    Symbol Faxll_TransferSpeed		= Format0.f0symbol(Faxll_     , 0x06D);
    Symbol Faxll_V17			= Format0.f0symbol(Faxll_     , 0x06E);
    Symbol Faxll_V27ter			= Format0.f0symbol(Faxll_     , 0x06F);
    Symbol Faxll_V29			= Format0.f0symbol(Faxll_     , 0x070);

    /***************************************************************
     * Fax: Fax System Service symbols.
     **************************************************************/
    Symbol Fax_ResourceClass		= Format0.f0symbol(Fax_	      , 0x000);
    Symbol Fax_ResourceID		= Format0.f0symbol(Fax_	      , 0x001);
    Symbol Fax_ResourceName		= Format0.f0symbol(Fax_	      , 0x002);
    Symbol Fax_ResourceVendor		= Format0.f0symbol(Fax_	      , 0x003);
    Symbol Fax_ResourceVersion		= Format0.f0symbol(Fax_	      , 0x004);
    Symbol Fax_NetworkID		= Format0.f0symbol(Fax_	      , 0x005);
    Symbol Fax_Stop			= Format0.f0symbol(Fax_	      , 0x007);

    Symbol Fax_AbortData		= Format0.f0symbol(Fax_	      , 0x010);
    Symbol Fax_AddConv			= Format0.f0symbol(Fax_	      , 0x011);
    Symbol Fax_AddKeys			= Format0.f0symbol(Fax_	      , 0x012);
    Symbol Fax_Alarm			= Format0.f0symbol(Fax_	      , 0x013);
    Symbol Fax_AlarmAlarmsUnavailable	= Format0.f0symbol(Fax_	      , 0x014);
    Symbol Fax_AlarmAsyncResponses	= Format0.f0symbol(Fax_	      , 0x015);
    Symbol Fax_AlarmConnectionLost	= Format0.f0symbol(Fax_	      , 0x016);
    Symbol Fax_AlarmCorruptedTDD	= Format0.f0symbol(Fax_	      , 0x017);
    Symbol Fax_AlarmDocumentReceived	= Format0.f0symbol(Fax_	      , 0x018);
    Symbol Fax_AlarmFaxResourceFailed	= Format0.f0symbol(Fax_	      , 0x019);
    Symbol Fax_AlarmQueueFull		= Format0.f0symbol(Fax_	      , 0x01A);
    Symbol Fax_AlarmReceiveEvent	= Format0.f0symbol(Fax_	      , 0x01B);
    Symbol Fax_AlarmsEnabled		= Format0.f0symbol(Fax_	      , 0x01C);
    Symbol Fax_AlarmSendEvent		= Format0.f0symbol(Fax_	      , 0x01D);
    Symbol Fax_AlarmSendFailed		= Format0.f0symbol(Fax_	      , 0x01E);
    Symbol Fax_AlarmSendSuccess		= Format0.f0symbol(Fax_	      , 0x01F);
    Symbol Fax_Cancel			= Format0.f0symbol(Fax_	      , 0x020);
    Symbol Fax_Check			= Format0.f0symbol(Fax_	      , 0x021);
    Symbol Fax_CodeID			= Format0.f0symbol(Fax_	      , 0x022);
    Symbol Fax_Codepages		= Format0.f0symbol(Fax_	      , 0x023);
    Symbol Fax_Coding			= Format0.f0symbol(Fax_	      , 0x024);
    Symbol Fax_Convert			= Format0.f0symbol(Fax_	      , 0x025);
    Symbol Fax_Copy			= Format0.f0symbol(Fax_	      , 0x026);
    Symbol Fax_Country			= Format0.f0symbol(Fax_	      , 0x027);
    Symbol Fax_Create			= Format0.f0symbol(Fax_	      , 0x028);
    Symbol Fax_Data			= Format0.f0symbol(Fax_	      , 0x029);
    Symbol Fax_DataID			= Format0.f0symbol(Fax_	      , 0x02A);
    Symbol Fax_Delete			= Format0.f0symbol(Fax_	      , 0x02B);
    Symbol Fax_Destroy			= Format0.f0symbol(Fax_	      , 0x02C);
    Symbol Fax_EM			= Format0.f0symbol(Fax_	      , 0x02D);
    Symbol Fax_Extend			= Format0.f0symbol(Fax_	      , 0x02E);
    Symbol Fax_FC			= Format0.f0symbol(Fax_	      , 0x02F);
    Symbol Fax_Font0			= Format0.f0symbol(Fax_	      , 0x030);
    Symbol Fax_Font1			= Format0.f0symbol(Fax_	      , 0x031);
    Symbol Fax_Font2			= Format0.f0symbol(Fax_	      , 0x032);
    Symbol Fax_Font3			= Format0.f0symbol(Fax_	      , 0x033);
    Symbol Fax_Font4			= Format0.f0symbol(Fax_	      , 0x034);
    Symbol Fax_Font5			= Format0.f0symbol(Fax_	      , 0x035);
    Symbol Fax_Font6			= Format0.f0symbol(Fax_	      , 0x036);
    Symbol Fax_Font7			= Format0.f0symbol(Fax_	      , 0x037);
    Symbol Fax_Font8			= Format0.f0symbol(Fax_	      , 0x038);
    Symbol Fax_Font9			= Format0.f0symbol(Fax_	      , 0x039);
    Symbol Fax_Fontx			= Format0.f0symbol(Fax_	      , 0x03A);
    Symbol Fax_FX3			= Format0.f0symbol(Fax_	      , 0x03B);
    Symbol Fax_GetData			= Format0.f0symbol(Fax_	      , 0x03C);
    Symbol Fax_GetParameters		= Format0.f0symbol(Fax_	      , 0x03D);
    Symbol Fax_GetTDD			= Format0.f0symbol(Fax_	      , 0x03E);
    Symbol Fax_National			= Format0.f0symbol(Fax_	      , 0x03F);
    Symbol Fax_Next			= Format0.f0symbol(Fax_	      , 0x040);
    Symbol Fax_Position			= Format0.f0symbol(Fax_	      , 0x041);
    Symbol Fax_Preview			= Format0.f0symbol(Fax_	      , 0x042);
    Symbol Fax_Private			= Format0.f0symbol(Fax_	      , 0x043);
    Symbol Fax_Purge			= Format0.f0symbol(Fax_	      , 0x044);
    Symbol Fax_PutData			= Format0.f0symbol(Fax_	      , 0x045);
    Symbol Fax_PutTDD			= Format0.f0symbol(Fax_	      , 0x046);
    Symbol Fax_Receive			= Format0.f0symbol(Fax_	      , 0x047);
    Symbol Fax_Reschedule		= Format0.f0symbol(Fax_	      , 0x048);
    Symbol Fax_Send			= Format0.f0symbol(Fax_	      , 0x049);
    Symbol Fax_SendAck			= Format0.f0symbol(Fax_	      , 0x04A);
    Symbol Fax_SetAlarm			= Format0.f0symbol(Fax_	      , 0x04B);
    Symbol Fax_SetParameters		= Format0.f0symbol(Fax_	      , 0x04C);
    Symbol Fax_Submit			= Format0.f0symbol(Fax_	      , 0x04D);
    Symbol Fax_TDD			= Format0.f0symbol(Fax_	      , 0x04E);
    Symbol Fax_TDDRespAvailable		= Format0.f0symbol(Fax_	      , 0x04F);
    Symbol Fax_Trace			= Format0.f0symbol(Fax_	      , 0x050);
    Symbol Fax_Unicode			= Format0.f0symbol(Fax_	      , 0x051);
    Symbol Fax_WillStop			= Format0.f0symbol(Fax_	      , 0x052);

    /***************************************************************
     * Group symbols.
     **************************************************************/
    Symbol Group_Class			= Format0.f0symbol(Group_     , 0x000);
    Symbol Group_Stop			= Format0.f0symbol(Group_     , 0x007);

    Symbol Group_Allocate		= Format0.f0symbol(Group_     , 0x010);
    Symbol Group_ArbitrationScheme	= Format0.f0symbol(Group_     , 0x011);
    /** indicates Group is attaching to secondary of other group. */
    Symbol Group_Attach			= Format0.f0symbol(Group_     , 0x012);
    /** indicates Group is attaching to secondary of other group. */
    Symbol Group_PrimaryToSecondary	= Format0.f0symbol(Group_     , 0x012);
    Symbol Group_Attributes		= Format0.f0symbol(Group_     , 0x013);
    Symbol Group_Blocking		= Format0.f0symbol(Group_     , 0x014);
    Symbol Group_Both			= Format0.f0symbol(Group_     , 0x015);
    /** indicates two groups are bridged. */
    Symbol Group_Bridge			= Format0.f0symbol(Group_     , 0x016);
    /** indicates two groups are bridged. */
    Symbol Group_SecondaryToSecondary	= Format0.f0symbol(Group_     , 0x016);
    Symbol Group_Cause			= Format0.f0symbol(Group_     , 0x017);
    Symbol Group_Config			= Format0.f0symbol(Group_     , 0x018);
    Symbol Group_ConfigSpec		= Format0.f0symbol(Group_     , 0x019);
    Symbol Group_Configure		= Format0.f0symbol(Group_     , 0x01A);
    Symbol Group_Connect		= Format0.f0symbol(Group_     , 0x01B);
    Symbol Group_ConnectionType		= Format0.f0symbol(Group_     , 0x01C);
    /** @deprecated typo in S.100-r2 @see #Container_ContainerInfo */
    Symbol Group_ContainerInfo		= Format0.f0symbol(Group_     , 0x01D);
    Symbol Group_Create			= Format0.f0symbol(Group_     , 0x01E);
    Symbol Group_Deallocate		= Format0.f0symbol(Group_     , 0x01F);
    Symbol Group_Destroy		= Format0.f0symbol(Group_     , 0x020);
    Symbol Group_Destroyed		= Format0.f0symbol(Group_     , 0x021);
    Symbol Group_Disconnect		= Format0.f0symbol(Group_     , 0x022);
    Symbol Group_FirstTalker		= Format0.f0symbol(Group_     , 0x023);
    Symbol Group_GetAttributes		= Format0.f0symbol(Group_     , 0x024);
    Symbol Group_GetConfigSpec		= Format0.f0symbol(Group_     , 0x025);
    Symbol Group_GetParameterNames	= Format0.f0symbol(Group_     , 0x026);
    Symbol Group_GetParameterRange	= Format0.f0symbol(Group_     , 0x027);
    Symbol Group_GetParameters		= Format0.f0symbol(Group_     , 0x028);
    Symbol Group_GetRTC			= Format0.f0symbol(Group_     , 0x029);
    /** @deprecated correct name is Group_GetInfo (late change to S.100-R2) */
    Symbol Group_GetUserInfo		= Format0.f0symbol(Group_     , 0x02A);
    Symbol Group_GetInfo		= Format0.f0symbol(Group_     , 0x02A);
    Symbol Group_Group			= Format0.f0symbol(Group_     , 0x02B);
    Symbol Group_Group1			= Format0.f0symbol(Group_     , 0x02C);
    Symbol Group_Group2			= Format0.f0symbol(Group_     , 0x02D);
    Symbol Group_GroupInfoSet		= Format0.f0symbol(Group_     , 0x02E);
    /** alternate spelling for Group_HandOff. */
    Symbol Group_Handoff		= Format0.f0symbol(Group_     , 0x02F);
    /** comand/event for delegateToService */
    Symbol Group_HandOff		= Format0.f0symbol(Group_     , 0x02F);
    Symbol Group_HandoffConfig		= Format0.f0symbol(Group_     , 0x030);
    Symbol Group_InitialDataFlow	= Format0.f0symbol(Group_     , 0x031);
    Symbol Group_LastTalker		= Format0.f0symbol(Group_     , 0x032);
    Symbol Group_Listen			= Format0.f0symbol(Group_     , 0x033);
    /** @deprecated use Group_PrimaryToPrimary (same value) */
    Symbol Group_Loopback		= Format0.f0symbol(Group_     , 0x034);
    /** Indicates a "loop back" connection between group primary streams. */
    Symbol Group_PrimaryToPrimary	= Format0.f0symbol(Group_     , 0x034);
    // typo in S.100-r2, correct Symbol is Group_MaxDataFlow
    // Symbol Group_Max			= Format0.f0symbol(Group_     , 0x035);
    Symbol Group_MaxDataFlow		= Format0.f0symbol(Group_     , 0x036);
    Symbol Group_NewDataFlow		= Format0.f0symbol(Group_     , 0x037);
    Symbol Group_None			= Format0.f0symbol(Group_     , 0x038);
    Symbol Group_ParameterNames		= Format0.f0symbol(Group_     , 0x039);
    Symbol Group_ParameterRangeSet	= Format0.f0symbol(Group_     , 0x03A);
    Symbol Group_Parameters		= Format0.f0symbol(Group_     , 0x03B);
    Symbol Group_ParmValues		= Format0.f0symbol(Group_     , 0x03C);
    Symbol Group_PreEmption		= Format0.f0symbol(Group_     , 0x03D);
    /** @deprecated correct name is Group_PutInfo (late change to S.100-R2) */
    Symbol Group_PutUserInfo		= Format0.f0symbol(Group_     , 0x03E);
    Symbol Group_PutInfo		= Format0.f0symbol(Group_     , 0x03E);
    Symbol Group_ResourceInfo		= Format0.f0symbol(Group_     , 0x03F);
    Symbol Group_ResourceName		= Format0.f0symbol(Group_     , 0x040);
    Symbol Group_ResourceNames		= Format0.f0symbol(Group_     , 0x041);
    Symbol Group_ResourceSpec		= Format0.f0symbol(Group_     , 0x042);
    Symbol Group_Retrieve		= Format0.f0symbol(Group_     , 0x043);
    Symbol Group_Retrieved		= Format0.f0symbol(Group_     , 0x044);
    Symbol Group_Return			= Format0.f0symbol(Group_     , 0x045);
    Symbol Group_Returned		= Format0.f0symbol(Group_     , 0x046);
    Symbol Group_RTC			= Format0.f0symbol(Group_     , 0x047);
    Symbol Group_RTCTrigger		= Format0.f0symbol(Group_     , 0x048);
    Symbol Group_SetDataFlow		= Format0.f0symbol(Group_     , 0x049);
    Symbol Group_SetParameters		= Format0.f0symbol(Group_     , 0x04A);
    Symbol Group_SetRTC			= Format0.f0symbol(Group_     , 0x04B);
    Symbol Group_Start			= Format0.f0symbol(Group_     , 0x04C);
    // duplicate: Group_Stop		= Format0.f0symbol(Group_     , 0x007);
    // Symbol Group_Stop		= Format0.f0symbol(Group_     , 0x04D);
    // rename Group_Summing
    Symbol Group_MixTalkers		= Format0.f0symbol(Group_     , 0x04E);
    Symbol Group_Summing		= Format0.f0symbol(Group_     , 0x04E);
    Symbol Group_Tag			= Format0.f0symbol(Group_     , 0x04F);
    Symbol Group_Talk			= Format0.f0symbol(Group_     , 0x050);
    Symbol Group_Unwind			= Format0.f0symbol(Group_     , 0x051);
    Symbol Group_UpdateParameters	= Format0.f0symbol(Group_     , 0x052);

    // added for S.100-R2 by CTM:
    // Symbol Group_WaitGroup		= Format0.f0symbol(Group_     , 0x053);

    // added for S.410:
    /** Attribute to override default deallocation strategy. */
    Symbol Group_DeallocateOnIdle	= Format0.f0symbol(Group_     , 0x055);
    /** For disconnect(Symbol), setDataFlow(Symbol, ) */
    Symbol Group_Primary		= Format0.f0symbol(Group_     , 0x056);
    /** For disconnect(Symbol), setDataFlow(Symbol, ) */
    Symbol Group_AllSecondary		= Format0.f0symbol(Group_     , 0x057);
    /** For disconnect(Symbol), setDataFlow(Symbol, ) */
    Symbol Group_AllConnections		= Format0.f0symbol(Group_     , 0x058);
    /** For disconnect(Symbol), setDataFlow(Symbol, ) */
    Symbol Group_SpecificGroup		= Format0.f0symbol(Group_     , 0x059);
    /** ConfigSpecConstant attribute */
    Symbol Group_StopOnDisconnect	= Format0.f0symbol(Group_     , 0x05A);
    /** Used for ev_ReleaseToService. 
     * <b>Note:</b> S.400 diffentiates delegateToService and releaseToService.
     */
    Symbol Group_ReleaseToService	= Format0.f0symbol(Group_     , 0x05B);

    /***************************************************************
     * Language symbols.
     **************************************************************/
    Symbol Language_Class		= Format0.f0symbol(Language_  , 0x000);
    Symbol Language_Language		= Format0.f0symbol(Language_  , 0x001);
    Symbol Language_Variant		= Format0.f0symbol(Language_  , 0x002);
    Symbol Language_SubVariant		= Format0.f0symbol(Language_  , 0x003);

    Symbol Language_Arabic		= Format0.f0symbol(Language_  , 0x010);
    Symbol Language_Bengali		= Format0.f0symbol(Language_  , 0x011);
    Symbol Language_Chinese		= Format0.f0symbol(Language_  , 0x012);
    Symbol Language_Croatian		= Format0.f0symbol(Language_  , 0x013);
    Symbol Language_Czech		= Format0.f0symbol(Language_  , 0x014);
    Symbol Language_Danish		= Format0.f0symbol(Language_  , 0x015);
    Symbol Language_Dutch		= Format0.f0symbol(Language_  , 0x016);
    Symbol Language_English		= Format0.f0symbol(Language_  , 0x017);
    Symbol Language_Finnish		= Format0.f0symbol(Language_  , 0x018);
    Symbol Language_French		= Format0.f0symbol(Language_  , 0x019);
    Symbol Language_German		= Format0.f0symbol(Language_  , 0x01A);
    Symbol Language_Greek		= Format0.f0symbol(Language_  , 0x01B);
    Symbol Language_Hebrew		= Format0.f0symbol(Language_  , 0x01C);
    Symbol Language_Hindi		= Format0.f0symbol(Language_  , 0x01D);
    Symbol Language_Hungarian		= Format0.f0symbol(Language_  , 0x01E);
    Symbol Language_Icelandic		= Format0.f0symbol(Language_  , 0x01F);
    Symbol Language_Italian		= Format0.f0symbol(Language_  , 0x020);
    Symbol Language_Japanese		= Format0.f0symbol(Language_  , 0x021);
    Symbol Language_Klingon		= Format0.f0symbol(Language_  , 0x022);
    Symbol Language_Korean		= Format0.f0symbol(Language_  , 0x023);
    Symbol Language_Norwegian		= Format0.f0symbol(Language_  , 0x024);
    Symbol Language_Nynorsk		= Format0.f0symbol(Language_  , 0x025);
    Symbol Language_Persian		= Format0.f0symbol(Language_  , 0x026);
    Symbol Language_Polish		= Format0.f0symbol(Language_  , 0x027);
    Symbol Language_Portuguese		= Format0.f0symbol(Language_  , 0x028);
    Symbol Language_Romanian		= Format0.f0symbol(Language_  , 0x029);
    Symbol Language_Russian		= Format0.f0symbol(Language_  , 0x02A);
    Symbol Language_Serbian		= Format0.f0symbol(Language_  , 0x02B);
    Symbol Language_SerboCroatian	= Format0.f0symbol(Language_  , 0x02C);
    Symbol Language_Spanish		= Format0.f0symbol(Language_  , 0x02D);
    Symbol Language_Swedish		= Format0.f0symbol(Language_  , 0x02E);
    Symbol Language_Tamil		= Format0.f0symbol(Language_  , 0x02F);
    Symbol Language_Thai		= Format0.f0symbol(Language_  , 0x030);
    Symbol Language_Turkish		= Format0.f0symbol(Language_  , 0x031);
    Symbol Language_AustralianEnglish	= Format0.f0symbol(Language_  , 0x100);
    Symbol Language_BritishEnglish	= Format0.f0symbol(Language_  , 0x101);
    Symbol Language_SingaporeEnglish	= Format0.f0symbol(Language_  , 0x102);
    Symbol Language_USEnglish		= Format0.f0symbol(Language_  , 0x103);

    // omission from S.100
    Symbol Language_Undetermined	= Format0.f0symbol(Language_  , 0x104);

    /***************************************************************
     * Message symbols.
     * Symbols to identify slots of the S.100 tranInfo.
     **************************************************************/
    Symbol Message_Class		= Format0.f0symbol(Message_   , 0x000);
    Symbol Message_Error		= Format0.f0symbol(Message_   , 0x001);
    Symbol Message_EventData		= Format0.f0symbol(Message_   , 0x002);
    Symbol Message_EventID		= Format0.f0symbol(Message_   , 0x003);
    Symbol Message_Keys			= Format0.f0symbol(Message_   , 0x004);
    Symbol Message_ParmList		= Format0.f0symbol(Message_   , 0x005);
    Symbol Message_ObjectACT		= Format0.f0symbol(Message_   , 0x006);
    Symbol Message_ObjectClass		= Format0.f0symbol(Message_   , 0x007);
    Symbol Message_ObjectID		= Format0.f0symbol(Message_   , 0x008);
    Symbol Message_Qualifier		= Format0.f0symbol(Message_   , 0x009);
    Symbol Message_RTC			= Format0.f0symbol(Message_   , 0x00A);
    Symbol Message_SessionACT		= Format0.f0symbol(Message_   , 0x00B);
    Symbol Message_SessionID		= Format0.f0symbol(Message_   , 0x00C);
    Symbol Message_Status		= Format0.f0symbol(Message_   , 0x00D);
    Symbol Message_SubError		= Format0.f0symbol(Message_   , 0x00E);
    Symbol Message_TransactionID	= Format0.f0symbol(Message_   , 0x00F);
    // omission from S.100-R2
    Symbol Message_MessageType		= Format0.f0symbol(Message_   , 0x010);

    /***************************************************************
     * Player symbols.
     **************************************************************/
    Symbol Player_ResourceClass		= Format0.f0symbol(Player_    , 0x000);
    Symbol Player_ResourceID		= Format0.f0symbol(Player_    , 0x001);
    Symbol Player_ResourceName		= Format0.f0symbol(Player_    , 0x002);
    Symbol Player_ResourceVendor	= Format0.f0symbol(Player_    , 0x003);
    Symbol Player_ResourceVersion	= Format0.f0symbol(Player_    , 0x004);
    Symbol Player_DynamicallyAllocated	= Format0.f0symbol(Player_    , 0x005);
    Symbol Player_NetworkID		= Format0.f0symbol(Player_    , 0x006);
    Symbol Player_Stop			= Format0.f0symbol(Player_    , 0x007);

    Symbol Player_ActivateDictionary	= Format0.f0symbol(Player_    , 0x010);
    Symbol Player_Active		= Format0.f0symbol(Player_    , 0x011);
    Symbol Player_Adjustment		= Format0.f0symbol(Player_    , 0x012);
    Symbol Player_AdjustSpeed		= Format0.f0symbol(Player_    , 0x013);
    Symbol Player_AdjustVolume		= Format0.f0symbol(Player_    , 0x014);
    Symbol Player_ChangeType		= Format0.f0symbol(Player_    , 0x015);
    Symbol Player_Character		= Format0.f0symbol(Player_    , 0x016);
    Symbol Player_Coder			= Format0.f0symbol(Player_    , 0x017);
    Symbol Player_CoderTypes		= Format0.f0symbol(Player_    , 0x018);
    Symbol Player_DeactivateDictionary	= Format0.f0symbol(Player_    , 0x019);
    Symbol Player_DictionaryList	= Format0.f0symbol(Player_    , 0x01A);
    Symbol Player_DictionaryCount	= Format0.f0symbol(Player_    , 0x01B);
    Symbol Player_DictionaryStack	= Format0.f0symbol(Player_    , 0x01C);
    Symbol Player_EnabledEvents		= Format0.f0symbol(Player_    , 0x01D);
    Symbol Player_EOD			= Format0.f0symbol(Player_    , 0x01E);
    Symbol Player_Fail			= Format0.f0symbol(Player_    , 0x01F);
    Symbol Player_Idle			= Format0.f0symbol(Player_    , 0x020);
    Symbol Player_IfBusy		= Format0.f0symbol(Player_    , 0x021);
    Symbol Player_Jump			= Format0.f0symbol(Player_    , 0x022);
    Symbol Player_JumpBackward		= Format0.f0symbol(Player_    , 0x023);
    Symbol Player_JumpBackwardSentences	= Format0.f0symbol(Player_    , 0x024);
    Symbol Player_JumpBackwardTime	= Format0.f0symbol(Player_    , 0x025);
    Symbol Player_JumpBackwardTVMs	= Format0.f0symbol(Player_    , 0x026);
    Symbol Player_JumpBackwardWords	= Format0.f0symbol(Player_    , 0x027);
    //Symbol Player_JumpBackwordSentences=Format0.f0symbol(Player_    , 0x028);
    Symbol Player_JumpEnd		= Format0.f0symbol(Player_    , 0x029);
    Symbol Player_JumpEndSentence	= Format0.f0symbol(Player_    , 0x02A);
    Symbol Player_JumpEndTVM		= Format0.f0symbol(Player_    , 0x02B);
    Symbol Player_JumpEndTVMList	= Format0.f0symbol(Player_    , 0x02C);
    Symbol Player_JumpForward		= Format0.f0symbol(Player_    , 0x02D);
    Symbol Player_JumpForwardSentences	= Format0.f0symbol(Player_    , 0x02E);
    Symbol Player_JumpForwardTime	= Format0.f0symbol(Player_    , 0x02F);
    Symbol Player_JumpForwardTVMs	= Format0.f0symbol(Player_    , 0x030);
    Symbol Player_JumpForwardWords	= Format0.f0symbol(Player_    , 0x031);
    // Symbol Player_JumpFowardWords	= Format0.f0symbol(Player_    , 0x032);
    Symbol Player_JumpSentence		= Format0.f0symbol(Player_    , 0x033);
    Symbol Player_JumpStart		= Format0.f0symbol(Player_    , 0x034);
    Symbol Player_JumpStartSentence	= Format0.f0symbol(Player_    , 0x035);
    Symbol Player_JumpStartTVM		= Format0.f0symbol(Player_    , 0x036);
    Symbol Player_JumpStartTVMList	= Format0.f0symbol(Player_    , 0x037);
    Symbol Player_JumpTime		= Format0.f0symbol(Player_    , 0x038);
    Symbol Player_JumpTVM		= Format0.f0symbol(Player_    , 0x039);
    Symbol Player_JumpTVMIncrement	= Format0.f0symbol(Player_    , 0x03A);
    Symbol Player_JumpTVMList		= Format0.f0symbol(Player_    , 0x03B);
    Symbol Player_JumpWord		= Format0.f0symbol(Player_    , 0x03C);
    Symbol Player_LoadDictionary	= Format0.f0symbol(Player_    , 0x03D);
    Symbol Player_LoadedDictionary	= Format0.f0symbol(Player_    , 0x03E);
    Symbol Player_Marker		= Format0.f0symbol(Player_    , 0x03F);
    Symbol Player_MaxDuration		= Format0.f0symbol(Player_    , 0x040);
    Symbol Player_Name			= Format0.f0symbol(Player_    , 0x041);
    Symbol Player_NormalSpeed		= Format0.f0symbol(Player_    , 0x042);
    Symbol Player_NormalVolume		= Format0.f0symbol(Player_    , 0x043);
    Symbol Player_Offset		= Format0.f0symbol(Player_    , 0x044);
    Symbol Player_Pause			= Format0.f0symbol(Player_    , 0x045);
    Symbol Player_Paused		= Format0.f0symbol(Player_    , 0x046);
    Symbol Player_Play			= Format0.f0symbol(Player_    , 0x047);
    Symbol Player_PlayStarted		= Format0.f0symbol(Player_    , 0x048);
    // also used as qualifier when if_busy==queue and busy 
    Symbol Player_Queue			= Format0.f0symbol(Player_    , 0x049);
    Symbol Player_Resume		= Format0.f0symbol(Player_    , 0x04A);
    Symbol Player_SapiOptions		= Format0.f0symbol(Player_    , 0x04B);
    Symbol Player_Sentence		= Format0.f0symbol(Player_    , 0x04C);
    Symbol Player_Size			= Format0.f0symbol(Player_    , 0x04D);
    Symbol Player_Speed			= Format0.f0symbol(Player_    , 0x04E);
    Symbol Player_SpeedChange		= Format0.f0symbol(Player_    , 0x04F);
    Symbol Player_SpeedDown		= Format0.f0symbol(Player_    , 0x050);
    Symbol Player_SpeedUp		= Format0.f0symbol(Player_    , 0x051);
    Symbol Player_StartPaused		= Format0.f0symbol(Player_    , 0x052);
    Symbol Player_ToggleSpeed		= Format0.f0symbol(Player_    , 0x053);
    Symbol Player_ToggleVolume		= Format0.f0symbol(Player_    , 0x054);
    Symbol Player_TTSJumpUnit		= Format0.f0symbol(Player_    , 0x055);
    Symbol Player_TVM			= Format0.f0symbol(Player_    , 0x056);
    Symbol Player_TVMBeginning		= Format0.f0symbol(Player_    , 0x057);
    Symbol Player_TVMEnd		= Format0.f0symbol(Player_    , 0x058);
    Symbol Player_TVMList		= Format0.f0symbol(Player_    , 0x059);
    Symbol Player_TVMCount		= Format0.f0symbol(Player_    , 0x05A);
    Symbol Player_Type			= Format0.f0symbol(Player_    , 0x05B);
    Symbol Player_Unit			= Format0.f0symbol(Player_    , 0x05C);
    Symbol Player_UnloadDictionary	= Format0.f0symbol(Player_    , 0x05D);
    Symbol Player_Vendor		= Format0.f0symbol(Player_    , 0x05E);
    Symbol Player_Version		= Format0.f0symbol(Player_    , 0x05F);
    Symbol Player_Volume		= Format0.f0symbol(Player_    , 0x060);
    Symbol Player_VolumeChange		= Format0.f0symbol(Player_    , 0x061);
    Symbol Player_VolumeDown		= Format0.f0symbol(Player_    , 0x062);
    Symbol Player_VolumeUp		= Format0.f0symbol(Player_    , 0x063);
    Symbol Player_Word			= Format0.f0symbol(Player_    , 0x064);

    /** Maybe unnecessary? */
    Symbol Player_WordList		= Format0.f0symbol(Player_    , 0x066);
    /***************************************************************
     * Recorder symbols.
     **************************************************************/
    Symbol Recorder_ResourceClass	= Format0.f0symbol(Recorder_  , 0x000);
    Symbol Recorder_ResourceID		= Format0.f0symbol(Recorder_  , 0x001);
    Symbol Recorder_ResourceName	= Format0.f0symbol(Recorder_  , 0x002);
    Symbol Recorder_ResourceVendor	= Format0.f0symbol(Recorder_  , 0x003);
    Symbol Recorder_ResourceVersion	= Format0.f0symbol(Recorder_  , 0x004);
    Symbol Recorder_DynamicallyAllocated= Format0.f0symbol(Recorder_  , 0x005);
    Symbol Recorder_NetworkID		= Format0.f0symbol(Recorder_  , 0x006);
    Symbol Recorder_Stop		= Format0.f0symbol(Recorder_  , 0x007);

    Symbol Recorder_Active		= Format0.f0symbol(Recorder_  , 0x010);
    Symbol Recorder_Beep		= Format0.f0symbol(Recorder_  , 0x011);
    Symbol Recorder_BeepFrequency	= Format0.f0symbol(Recorder_  , 0x012);
    Symbol Recorder_BeepLength		= Format0.f0symbol(Recorder_  , 0x013);
    Symbol Recorder_Coder		= Format0.f0symbol(Recorder_  , 0x014);
    Symbol Recorder_CoderTypes		= Format0.f0symbol(Recorder_  , 0x015);
    // typo in S.100-r2
    // Symbol Recorder_CompressionOn	= Format0.f0symbol(Recorder_  , 0x016);
    Symbol Recorder_Duration		= Format0.f0symbol(Recorder_  , 0x017);
    Symbol Recorder_EnabledEvents	= Format0.f0symbol(Recorder_  , 0x018);
    Symbol Recorder_FixedBeep		= Format0.f0symbol(Recorder_  , 0x019);
    Symbol Recorder_Idle		= Format0.f0symbol(Recorder_  , 0x01A);
    Symbol Recorder_MaxDuration		= Format0.f0symbol(Recorder_  , 0x01B);
    Symbol Recorder_MinDuration		= Format0.f0symbol(Recorder_  , 0x01C);
    Symbol Recorder_Pause		= Format0.f0symbol(Recorder_  , 0x01D);
    Symbol Recorder_PauseCompressionOn	= Format0.f0symbol(Recorder_  , 0x01E);
    Symbol Recorder_Paused		= Format0.f0symbol(Recorder_  , 0x01F);
    // typo in S.100-r2
    // Symbol Recorder_PauseTermination	= Format0.f0symbol(Recorder_  , 0x020);
    Symbol Recorder_PauseThreshold	= Format0.f0symbol(Recorder_  , 0x021);
    Symbol Recorder_Record		= Format0.f0symbol(Recorder_  , 0x022);
    Symbol Recorder_Resume		= Format0.f0symbol(Recorder_  , 0x023);
    Symbol Recorder_Silence		= Format0.f0symbol(Recorder_  , 0x024);
    Symbol Recorder_SilenceTerminationOn= Format0.f0symbol(Recorder_  , 0x025);
    Symbol Recorder_SilenceThreshold	= Format0.f0symbol(Recorder_  , 0x026);
    Symbol Recorder_StartBeep		= Format0.f0symbol(Recorder_  , 0x027);
    Symbol Recorder_StartPaused		= Format0.f0symbol(Recorder_  , 0x028);
    // typo in S.100-r2: use SilenceTerminationOn 
    // Symbol Recorder_TerminationOn	= Format0.f0symbol(Recorder_  , 0x029);
    Symbol Recorder_TVM			= Format0.f0symbol(Recorder_  , 0x02A);
    // added for S.410
    /** parameter to enable recording at end of container. */
    Symbol Recorder_Append		= Format0.f0symbol(Recorder_  , 0x02B);

    /***************************************************************
     * SCR: System Call Router Symbols.
     **************************************************************/
    /** @deprecated use SCR_Class */
    Symbol SCR_ResourceClass		= Format0.f0symbol(SCR_	      , 0x000);
    Symbol SCR_Class			= Format0.f0symbol(SCR_	      , 0x000);
    Symbol SCR_ResourceID		= Format0.f0symbol(SCR_	      , 0x001);
    Symbol SCR_ResourceName		= Format0.f0symbol(SCR_	      , 0x002);
    Symbol SCR_ResourceVendor		= Format0.f0symbol(SCR_	      , 0x003);
    Symbol SCR_ResourceVersion		= Format0.f0symbol(SCR_	      , 0x004);
    Symbol SCR_Stop			= Format0.f0symbol(SCR_	      , 0x007);

    Symbol SCR_ACT			= Format0.f0symbol(SCR_	      , 0x010);
    /** a value of ConnectionState */ 
    Symbol SCR_Alerting			= Format0.f0symbol(SCR_	      , 0x011);
    Symbol SCR_AnswerCall		= Format0.f0symbol(SCR_	      , 0x012);
    Symbol SCR_ASI			= Format0.f0symbol(SCR_	      , 0x013);
    /** @deprecated use SCR_ConnectionState */
    Symbol SCR_CallState		= Format0.f0symbol(SCR_	      , 0x014);
    /** JTAPI compatible name for S.100 CallState. */
    Symbol SCR_ConnectionState		= Format0.f0symbol(SCR_	      , 0x014);
    // typo in S.100-R2: obsolete S.100-R1 reference
    // Symbol SCR_Cancel		= Format0.f0symbol(SCR_	      , 0x015);
    /** a value of ConnectionState */ 
    Symbol SCR_Connected		= Format0.f0symbol(SCR_	      , 0x016);
    Symbol SCR_ConnectionStateEvent	= Format0.f0symbol(SCR_	      , 0x017);
    Symbol SCR_DestAddress		= Format0.f0symbol(SCR_	      , 0x018);
    /** cmd or ev for DropCall. */
    Symbol SCR_DropCall			= Format0.f0symbol(SCR_	      , 0x019);
    // check typo on State
    Symbol SCR_EnableConnectionState	= Format0.f0symbol(SCR_	      , 0x01A);
    /** a value of ConnectionState, same as SCR_Failed. S100-r2v5 Fig1.2 */
    Symbol SCR_Fail			= Format0.f0symbol(SCR_	      , 0x01B);
    /** a value of ConnectionState, same as SCR_Fail. S100-r2v5 Fig2.1 */ 
    Symbol SCR_Failed			= Format0.f0symbol(SCR_	      , 0x01B);
    Symbol SCR_Group			= Format0.f0symbol(SCR_	      , 0x01C);
    /** a value of ConnectionState, also cmdID or evendID for Hold. */
    Symbol SCR_Hold			= Format0.f0symbol(SCR_	      , 0x01D);
    Symbol SCR_InboundConnectionState	= Format0.f0symbol(SCR_	      , 0x01E);
    /** a value of ConnectionState */ 
    Symbol SCR_Initiated		= Format0.f0symbol(SCR_	      , 0x01F);
    Symbol SCR_LocalConnectionState	= Format0.f0symbol(SCR_	      , 0x020);
    Symbol SCR_MakeCall			= Format0.f0symbol(SCR_	      , 0x021);
    Symbol SCR_MakeConsultationCall	= Format0.f0symbol(SCR_	      , 0x022);
    /** possible typo for SCR_SendMessage? */
    Symbol SCR_Message			= Format0.f0symbol(SCR_	      , 0x023);
    Symbol SCR_Null			= Format0.f0symbol(SCR_	      , 0x024);
    Symbol SCR_NumRings			= Format0.f0symbol(SCR_	      , 0x025);
    Symbol SCR_OptionalArgs		= Format0.f0symbol(SCR_	      , 0x026);
    Symbol SCR_OutboundConnectionState	= Format0.f0symbol(SCR_	      , 0x027);
    Symbol SCR_Payload			= Format0.f0symbol(SCR_	      , 0x028);
    /** a value of ConnectionState */ 
    Symbol SCR_Queued			= Format0.f0symbol(SCR_	      , 0x029);
    Symbol SCR_RemoteConnectionState	= Format0.f0symbol(SCR_	      , 0x02A);
    Symbol SCR_RequestGroup		= Format0.f0symbol(SCR_	      , 0x02B);
    Symbol SCR_RequestType		= Format0.f0symbol(SCR_	      , 0x02C);
    Symbol SCR_TransferCall		= Format0.f0symbol(SCR_	      , 0x02D);
    Symbol SCR_UnreceivedCount		= Format0.f0symbol(SCR_	      , 0x02E);
    /** Command and Event ID for sendMessage() */
    Symbol SCR_SendMessage		= Format0.f0symbol(SCR_       , 0x02F);
    /** A value of ConnectionState */ 
    Symbol SCR_Disconnected		= Format0.f0symbol(SCR_	      , 0x030);
    /** marks the state or event when there are not Connections to Terminal.
     * MediaEvent.ev_TerminalIdle for S.410 */
    Symbol SCR_TerminalIdle		= Format0.f0symbol(SCR_	      , 0x031);
    // Jtapi connection state
    Symbol SCR_InProgress		= Format0.f0symbol(SCR_	      , 0x032);

    /** NumRings scaled to milliseconds, used in S.410 */
    Symbol SCR_AlertingTimeout		= Format0.f0symbol(SCR_	      , 0x033);

    /***************************************************************
     * Service: Application Service Symbols.
     **************************************************************/
    Symbol Service_Class		= Format0.f0symbol(Service_   , 0x000);
    Symbol Service_ACT			= Format0.f0symbol(Service_   , 0x001);
    // For S.200 protocol notifying when Service is opened/closed
    /** an eventID delivered to NamedService when a connection is opened. */
    Symbol Service_Opened		= Format0.f0symbol(Service_   , 0x012);
    /** an eventID delivered to NamedService when a connection is closed. */
    Symbol Service_Closed		= Format0.f0symbol(Service_   , 0x013);

    // The following are otherwise unused Symbols that can be
    // assigned protocol-specific meaning by any application service.
    /** Symbol that can be used by application service. */
    Symbol Service_ID0			= Format0.f0symbol(Service_   , 0x1D0);
    /** Symbol that can be used by application service. */
    Symbol Service_ID1			= Format0.f0symbol(Service_   , 0x1D1);
    /** Symbol that can be used by application service. */
    Symbol Service_ID2			= Format0.f0symbol(Service_   , 0x1D2);
    /** Symbol that can be used by application service. */
    Symbol Service_ID3			= Format0.f0symbol(Service_   , 0x1D3);
    /** Symbol that can be used by application service. */
    Symbol Service_ID4			= Format0.f0symbol(Service_   , 0x1D4);
    /** Symbol that can be used by application service. */
    Symbol Service_ID5			= Format0.f0symbol(Service_   , 0x1D5);
    /** Symbol that can be used by application service. */
    Symbol Service_ID6			= Format0.f0symbol(Service_   , 0x1D6);
    /** Symbol that can be used by application service. */
    Symbol Service_ID7			= Format0.f0symbol(Service_   , 0x1D7);
    /** Symbol that can be used by application service. */
    Symbol Service_ID8			= Format0.f0symbol(Service_   , 0x1D8);
    /** Symbol that can be used by application service. */
    Symbol Service_ID9			= Format0.f0symbol(Service_   , 0x1D9);
    /** Symbol that can be used by application service. */
    Symbol Service_IDa			= Format0.f0symbol(Service_   , 0x1Da);
    /** Symbol that can be used by application service. */
    Symbol Service_IDb			= Format0.f0symbol(Service_   , 0x1Db);
    /** Symbol that can be used by application service. */
    Symbol Service_IDc			= Format0.f0symbol(Service_   , 0x1Dc);
    /** Symbol that can be used by application service. */
    Symbol Service_IDd			= Format0.f0symbol(Service_   , 0x1Dd);
    /** Symbol that can be used by application service. */
    Symbol Service_IDe			= Format0.f0symbol(Service_   , 0x1De);
    /** Symbol that can be used by application service. */
    Symbol Service_IDf			= Format0.f0symbol(Service_   , 0x1Df);

    /***************************************************************
     * Session Symbols.
     **************************************************************/
    Symbol Session_Class		= Format0.f0symbol(Session_   , 0x000);
    Symbol Session_Destroy		= Format0.f0symbol(Session_   , 0x001);
    Symbol Session_Stop			= Format0.f0symbol(Session_   , 0x007);
    // editing failure in S.100-R2
    // Symbol Session_xClass		= Format0.f0symbol(Session_   , 0x010);
    Symbol Session_Admin		= Format0.f0symbol(Session_   , 0x011);
    Symbol Session_AttributeList	= Format0.f0symbol(Session_   , 0x012);
    Symbol Session_AuthToken		= Format0.f0symbol(Session_   , 0x013);
    Symbol Session_AuthType		= Format0.f0symbol(Session_   , 0x014);
    Symbol Session_Create		= Format0.f0symbol(Session_   , 0x015);
    Symbol Session_Destroyed		= Format0.f0symbol(Session_   , 0x017);
    Symbol Session_EmergencyShutdown	= Format0.f0symbol(Session_   , 0x018);
    Symbol Session_FindService		= Format0.f0symbol(Session_   , 0x019);
    Symbol Session_GetParameters	= Format0.f0symbol(Session_   , 0x01A);
    Symbol Session_NormalShutdown	= Format0.f0symbol(Session_   , 0x01B);
    Symbol Session_Password		= Format0.f0symbol(Session_   , 0x01C);
    /** @deprecated apparent typo in S.100-R2. use RegisterService */
    Symbol Session_Register		= Format0.f0symbol(Session_   , 0x01D);
    Symbol Session_RegisterService	= Format0.f0symbol(Session_   , 0x01D);
    Symbol Session_ReleaseService	= Format0.f0symbol(Session_   , 0x01E);
    Symbol Session_RTCkvs		= Format0.f0symbol(Session_   , 0x01F);
    Symbol Session_RTCName		= Format0.f0symbol(Session_   , 0x020);
    Symbol Session_ServerName		= Format0.f0symbol(Session_   , 0x021);
    Symbol Session_ServiceID		= Format0.f0symbol(Session_   , 0x022);
    Symbol Session_SessionACT		= Format0.f0symbol(Session_   , 0x023);
    Symbol Session_SetParameters	= Format0.f0symbol(Session_   , 0x024);
    // Symbol Session_Stop		= Format0.f0symbol(Session_   , 0x025);
    Symbol Session_UnregisterService	= Format0.f0symbol(Session_   , 0x026);
    Symbol Session_UserID		= Format0.f0symbol(Session_   , 0x027);

    // S.100-R2 omissions:
    Symbol Session_ServiceName		= Format0.f0symbol(Session_   , 0x028);
    Symbol Session_StopTransactionID	= Format0.f0symbol(Session_   , 0x029);
    Symbol Session_SendMessage		= Format0.f0symbol(Session_   , 0x02B);

    /***************************************************************
     * SD: Signal Detector Symbols.
     **************************************************************/
    Symbol SD_ResourceClass		= Format0.f0symbol(SD_	      , 0x000);
    Symbol SD_ResourceID		= Format0.f0symbol(SD_	      , 0x001);
    Symbol SD_ResourceName		= Format0.f0symbol(SD_	      , 0x002);
    Symbol SD_ResourceVendor		= Format0.f0symbol(SD_	      , 0x003);
    Symbol SD_ResourceVersion		= Format0.f0symbol(SD_	      , 0x004);
    Symbol SD_DynamicallyAllocated	= Format0.f0symbol(SD_	      , 0x005);
    Symbol SD_NetworkID			= Format0.f0symbol(SD_	      , 0x006);
    Symbol SD_Stop			= Format0.f0symbol(SD_	      , 0x007);

    Symbol SD_BufferEnabled		= Format0.f0symbol(SD_	      , 0x010);
    Symbol SD_Buffering			= Format0.f0symbol(SD_	      , 0x011);
    Symbol SD_BufferSize		= Format0.f0symbol(SD_	      , 0x012);
    Symbol SD_Count			= Format0.f0symbol(SD_	      , 0x013);
    Symbol SD_Detecting			= Format0.f0symbol(SD_	      , 0x014);
    Symbol SD_Discard			= Format0.f0symbol(SD_	      , 0x015);
    Symbol SD_DiscardOldest		= Format0.f0symbol(SD_	      , 0x016);
    Symbol SD_Duration			= Format0.f0symbol(SD_	      , 0x017);
    Symbol SD_Enabled			= Format0.f0symbol(SD_	      , 0x018);
    Symbol SD_EnabledEvents		= Format0.f0symbol(SD_	      , 0x019);
    Symbol SD_Events			= Format0.f0symbol(SD_	      , 0x01A);
    Symbol SD_Filter			= Format0.f0symbol(SD_	      , 0x01B);
    Symbol SD_FlushBuffer		= Format0.f0symbol(SD_	      , 0x01C);
    Symbol SD_Idle			= Format0.f0symbol(SD_	      , 0x01D);
    /** typo in S.100-R2.
     * @deprecated use SD_IntialTimeout */
    Symbol SD_Initial			= Format0.f0symbol(SD_	      , 0x01E);
    Symbol SD_InitialTimeout		= Format0.f0symbol(SD_	      , 0x01F);
    /** typo in S.100-R2. reference is to InterSignalTimeout.
     * @deprecated use SD_InterSigTimeout */
    Symbol SD_Intersig			= Format0.f0symbol(SD_	      , 0x020);
    Symbol SD_InterSigTimeout		= Format0.f0symbol(SD_	      , 0x021);
    Symbol SD_Mode			= Format0.f0symbol(SD_	      , 0x022);
    Symbol SD_NumSignals		= Format0.f0symbol(SD_	      , 0x023);
    Symbol SD_Oldest			= Format0.f0symbol(SD_	      , 0x024);
    Symbol SD_OutputBuffer		= Format0.f0symbol(SD_	      , 0x025);
    Symbol SD_Overflow			= Format0.f0symbol(SD_	      , 0x026);
    Symbol SD_Pattern			= Format0.f0symbol(SD_	      , 0x027);
    /** 32 individual eventID Symbols for RTC */
    Symbol SD_Pattern0			= Format0.f0symbol(SD_	      , 0x028);
    Symbol SD_Pattern1			= Format0.f0symbol(SD_	      , 0x029);
    Symbol SD_Pattern2			= Format0.f0symbol(SD_	      , 0x02A);
    Symbol SD_Pattern3			= Format0.f0symbol(SD_	      , 0x02B);
    Symbol SD_Pattern4			= Format0.f0symbol(SD_	      , 0x02C);
    Symbol SD_Pattern5			= Format0.f0symbol(SD_	      , 0x02D);
    Symbol SD_Pattern6			= Format0.f0symbol(SD_	      , 0x02E);
    Symbol SD_Pattern7			= Format0.f0symbol(SD_	      , 0x02F);
    Symbol SD_Pattern8			= Format0.f0symbol(SD_	      , 0x030);
    Symbol SD_Pattern9			= Format0.f0symbol(SD_	      , 0x031);
    Symbol SD_Pattern10			= Format0.f0symbol(SD_	      , 0x032);
    Symbol SD_Pattern11			= Format0.f0symbol(SD_	      , 0x033);
    Symbol SD_Pattern12			= Format0.f0symbol(SD_	      , 0x034);
    Symbol SD_Pattern13			= Format0.f0symbol(SD_	      , 0x035);
    Symbol SD_Pattern14			= Format0.f0symbol(SD_	      , 0x036);
    Symbol SD_Pattern15			= Format0.f0symbol(SD_	      , 0x037);
    Symbol SD_Pattern16			= Format0.f0symbol(SD_	      , 0x038);
    Symbol SD_Pattern17			= Format0.f0symbol(SD_	      , 0x039);
    Symbol SD_Pattern18			= Format0.f0symbol(SD_	      , 0x03A);
    Symbol SD_Pattern19			= Format0.f0symbol(SD_	      , 0x03B);
    Symbol SD_Pattern20			= Format0.f0symbol(SD_	      , 0x03C);
    Symbol SD_Pattern21			= Format0.f0symbol(SD_	      , 0x03D);
    Symbol SD_Pattern22			= Format0.f0symbol(SD_	      , 0x03E);
    Symbol SD_Pattern23			= Format0.f0symbol(SD_	      , 0x03F);
    Symbol SD_Pattern24			= Format0.f0symbol(SD_	      , 0x040);
    Symbol SD_Pattern25			= Format0.f0symbol(SD_	      , 0x041);
    Symbol SD_Pattern26			= Format0.f0symbol(SD_	      , 0x042);
    Symbol SD_Pattern27			= Format0.f0symbol(SD_	      , 0x043);
    Symbol SD_Pattern28			= Format0.f0symbol(SD_	      , 0x044);
    Symbol SD_Pattern29			= Format0.f0symbol(SD_	      , 0x045);
    Symbol SD_Pattern30			= Format0.f0symbol(SD_	      , 0x046);
    Symbol SD_Pattern31			= Format0.f0symbol(SD_	      , 0x047);
    Symbol SD_Patterns			= Format0.f0symbol(SD_	      , 0x048);
    Symbol SD_PatternCount		= Format0.f0symbol(SD_	      , 0x049);
    Symbol SD_RetrieveSignals		= Format0.f0symbol(SD_	      , 0x04A);

    Symbol SD_SigCount			= Format0.f0symbol(SD_	      , 0x04B);
    Symbol SD_SignalDetected		= Format0.f0symbol(SD_	      , 0x04C);
    /** @deprecated, use SD_SignalDetected */
    Symbol SD_SingleSignal		= Format0.f0symbol(SD_	      , 0x04D);
    // added for S.400
    /** Key for the SignalIndex when event is coded as a KVSet */
    Symbol SD_SignalIndex		= Format0.f0symbol(SD_	      , 0x04E);

    /*************************************************************
     * SG: Signal Generator Symbols.
     ************************************************************/
    Symbol SG_ResourceClass		= Format0.f0symbol(SG_	      , 0x000);
    Symbol SG_ResourceID		= Format0.f0symbol(SG_	      , 0x001);
    Symbol SG_ResourceName		= Format0.f0symbol(SG_	      , 0x002);
    Symbol SG_ResourceVendor		= Format0.f0symbol(SG_	      , 0x003);
    Symbol SG_ResourceVersion		= Format0.f0symbol(SG_	      , 0x004);
    Symbol SG_DynamicallyAllocated	= Format0.f0symbol(SG_	      , 0x005);
    Symbol SG_NetworkID			= Format0.f0symbol(SG_	      , 0x006);
    Symbol SG_Stop			= Format0.f0symbol(SG_	      , 0x007);

    Symbol SG_SendSignals		= Format0.f0symbol(SG_	      , 0x010);
    Symbol SG_SignalList		= Format0.f0symbol(SG_	      , 0x011);

    // added all these for S.410
    Symbol SG_SymbolChar		= Format0.f0symbol(SG_	      , 0x01d);
    Symbol SG_CNG			= Format0.f0symbol(SG_	      , 0x01e);
    Symbol SG_CED			= Format0.f0symbol(SG_	      , 0x01f);

    Symbol SG_DTMF0			= Format0.f0symbol(SG_	      , 0x020);
    Symbol SG_DTMF1			= Format0.f0symbol(SG_	      , 0x021);
    Symbol SG_DTMF2			= Format0.f0symbol(SG_	      , 0x022);
    Symbol SG_DTMF3			= Format0.f0symbol(SG_	      , 0x023);
    Symbol SG_DTMF4			= Format0.f0symbol(SG_	      , 0x024);
    Symbol SG_DTMF5			= Format0.f0symbol(SG_	      , 0x025);
    Symbol SG_DTMF6			= Format0.f0symbol(SG_	      , 0x026);
    Symbol SG_DTMF7			= Format0.f0symbol(SG_	      , 0x027);
    Symbol SG_DTMF8			= Format0.f0symbol(SG_	      , 0x028);
    Symbol SG_DTMF9			= Format0.f0symbol(SG_	      , 0x029);
    Symbol SG_DTMFA			= Format0.f0symbol(SG_	      , 0x02a);
    Symbol SG_DTMFB			= Format0.f0symbol(SG_	      , 0x02b);
    Symbol SG_DTMFC			= Format0.f0symbol(SG_	      , 0x02c);
    Symbol SG_DTMFD			= Format0.f0symbol(SG_	      , 0x02d);
    Symbol SG_DTMFStar			= Format0.f0symbol(SG_	      , 0x02e);
    Symbol SG_DTMFHash			= Format0.f0symbol(SG_	      , 0x02f);


    /***************************************************************
     * SPR: Switch Port Resource symbols
     **************************************************************/
    Symbol SPR_ResourceClass            = Format0.f0symbol(SPR_       , 0x000);
    Symbol SPR_ResourceID               = Format0.f0symbol(SPR_       , 0x001);
    Symbol SPR_ResourceName             = Format0.f0symbol(SPR_       , 0x002);
    Symbol SPR_ResourceVendor           = Format0.f0symbol(SPR_       , 0x003);
    Symbol SPR_ResourceVersion          = Format0.f0symbol(SPR_       , 0x004);
    Symbol SPR_Stop                     = Format0.f0symbol(SPR_       , 0x007);
    Symbol SPR_Active                   = Format0.f0symbol(SPR_       , 0x010);
    Symbol SPR_Idle                     = Format0.f0symbol(SPR_       , 0x016);
    Symbol SPR_State			= Format0.f0symbol(SPR_	      , 0x01D);

    /***************************************************************
     * Administration symbols. (from M.100)
     ***************************************************************/
    Symbol Admin_Class			= Format0.f0symbol(Admin_     , 0x000);
    // Symbol Admin_Diagnose		= Format0.f0symbol(Admin_     , 0x000);
    Symbol Admin_DiagnosePing		= Format0.f0symbol(Admin_     , 0x001);
    Symbol Admin_DiagnoseOnLine		= Format0.f0symbol(Admin_     , 0x002);
    Symbol Admin_DiagnoseOffLine	= Format0.f0symbol(Admin_     , 0x003);
    Symbol Admin_DiagnosePass		= Format0.f0symbol(Admin_     , 0x004);
    Symbol Admin_DiagnoseFail		= Format0.f0symbol(Admin_     , 0x005);
    Symbol Admin_DiagnoseType		= Format0.f0symbol(Admin_     , 0x006);
    Symbol Admin_SPName			= Format0.f0symbol(Admin_     , 0x007);
    Symbol Admin_SPInService		= Format0.f0symbol(Admin_     , 0x008);
    Symbol Admin_SPOutOfService		= Format0.f0symbol(Admin_     , 0x009);
    Symbol Admin_ProfileName		= Format0.f0symbol(Admin_     , 0x00A);
    Symbol Admin_ProfileClass		= Format0.f0symbol(Admin_     , 0x00B);
    Symbol Admin_ProfileData		= Format0.f0symbol(Admin_     , 0x00C);
    Symbol Admin_ServiceName		= Format0.f0symbol(Admin_     , 0x00D);
    Symbol Admin_SPState		= Format0.f0symbol(Admin_     , 0x00E);
    Symbol Admin_GoInService		= Format0.f0symbol(Admin_     , 0x00F);
    Symbol Admin_GoOutOfService		= Format0.f0symbol(Admin_     , 0x010);
    Symbol Admin_ExportProfile		= Format0.f0symbol(Admin_     , 0x011);
    Symbol Admin_GetProfileInfo		= Format0.f0symbol(Admin_     , 0x012);
    Symbol Admin_GetServiceInfo		= Format0.f0symbol(Admin_     , 0x013);
    Symbol Admin_GetSPInfo		= Format0.f0symbol(Admin_     , 0x014);
    Symbol Admin_GetState		= Format0.f0symbol(Admin_     , 0x015);
    Symbol Admin_GetServerLevel		= Format0.f0symbol(Admin_     , 0x016);
    Symbol Admin_GetServiceState	= Format0.f0symbol(Admin_     , 0x017);
    Symbol Admin_AddProfile		= Format0.f0symbol(Admin_     , 0x018);
    Symbol Admin_AddService		= Format0.f0symbol(Admin_     , 0x019);
    Symbol Admin_ImportProfile		= Format0.f0symbol(Admin_     , 0x01A);
    Symbol Admin_RemoveProfile		= Format0.f0symbol(Admin_     , 0x01B);
    Symbol Admin_RemoveService		= Format0.f0symbol(Admin_     , 0x01C);
    Symbol Admin_SetTargetServerLevel	= Format0.f0symbol(Admin_     , 0x01D);
    Symbol Admin_NormalShutdown		= Format0.f0symbol(Admin_     , 0x01E);
    Symbol Admin_EmergencyShutdown	= Format0.f0symbol(Admin_     , 0x01F);
    Symbol Admin_StartService		= Format0.f0symbol(Admin_     , 0x020);
    Symbol Admin_StopService		= Format0.f0symbol(Admin_     , 0x021);
    Symbol Admin_UpdateProfile		= Format0.f0symbol(Admin_     , 0x022);
    Symbol Admin_UpdateService		= Format0.f0symbol(Admin_     , 0x023);
    Symbol Admin_Test			= Format0.f0symbol(Admin_     , 0x024);
    Symbol Admin_TestStatus		= Format0.f0symbol(Admin_     , 0x025);
    Symbol Admin_ServerLevel		= Format0.f0symbol(Admin_     , 0x026);
    Symbol Admin_ServiceDisabled	= Format0.f0symbol(Admin_     , 0x027);
    Symbol Admin_SPAvailability		= Format0.f0symbol(Admin_     , 0x028);
    Symbol Admin_DiagInfo		= Format0.f0symbol(Admin_     , 0x029);
    Symbol Admin_ServiceStateIdle	= Format0.f0symbol(Admin_     , 0x02A);
    Symbol Admin_ServiceStateRunning	= Format0.f0symbol(Admin_     , 0x02B);
    Symbol Admin_ServiceTypeMandatory	= Format0.f0symbol(Admin_     , 0x02C);
    Symbol Admin_ServiceTypeOptional	= Format0.f0symbol(Admin_     , 0x02D);
    Symbol Admin_ServiceType		= Format0.f0symbol(Admin_     , 0x02E);
    Symbol Admin_ServiceState		= Format0.f0symbol(Admin_     , 0x02F);
    // Replaced by Admin_ECTF_SPInService
    // Symbol Admin_InService		= Format0.f0symbol(Admin_     , 0x030);
    // Replaced by Admin_ECTF_SPOutOfService
    // Symbol Admin_OutOfService	= Format0.f0symbol(Admin_     , 0x031);
    Symbol Admin_ServiceDLLMDTSafe	= Format0.f0symbol(Admin_     , 0x032);
    Symbol Admin_ServiceForm		= Format0.f0symbol(Admin_     , 0x033);
    Symbol Admin_ServiceCommandLine	= Format0.f0symbol(Admin_     , 0x034);
    Symbol Admin_ServiceDetectHangs	= Format0.f0symbol(Admin_     , 0x035);
    Symbol Admin_ServiceStopTimeout	= Format0.f0symbol(Admin_     , 0x036);
    Symbol Admin_ServiceMaxRestarts	= Format0.f0symbol(Admin_     , 0x037);
    Symbol Admin_ServiceStartTimeout	= Format0.f0symbol(Admin_     , 0x038);
    Symbol Admin_ServiceDLL		= Format0.f0symbol(Admin_     , 0x039);
    Symbol Admin_ServiceDLLProcess	= Format0.f0symbol(Admin_     , 0x03A);
    Symbol Admin_ServiceDLLLinkEarly	= Format0.f0symbol(Admin_     , 0x03B);
    Symbol Admin_ServiceDLLUnlinkLate	= Format0.f0symbol(Admin_     , 0x03C);
    Symbol Admin_OutputInfo		= Format0.f0symbol(Admin_     , 0x03D);
    Symbol Admin_ServiceStateStarting	= Format0.f0symbol(Admin_     , 0x03E);
    Symbol Admin_ServiceStateWaiting	= Format0.f0symbol(Admin_     , 0x03F);
    Symbol Admin_ServiceStateFailed	= Format0.f0symbol(Admin_     , 0x040);
    Symbol Admin_ServiceStateStopping	= Format0.f0symbol(Admin_     , 0x041);
    Symbol Admin_Diagnose		= Format0.f0symbol(Admin_     , 0x042);
}
